
servo_ddr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006490  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800664c  0800664c  0001664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066bc  080066bc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066c4  080066c4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080066cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000002c  080066f8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080066f8  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013610  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000238b  00000000  00000000  000336af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00035a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc6  00000000  00000000  00036bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029bb2  00000000  00000000  0003797e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001442b  00000000  00000000  00061530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001060c3  00000000  00000000  0007595b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ae4  00000000  00000000  0017ba20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00180504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000002c 	.word	0x2000002c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006634 	.word	0x08006634

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000030 	.word	0x20000030
 80001f8:	08006634 	.word	0x08006634

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <poll_accel>:
/*
 * poll_accell: sends a polling instruction to one of the two handheld XBEE
 * + accelerometer combos. The XBEE returns a packet of data which poll_accel
 * parses and returns the ADC value from the accelerometer
 * */
int poll_accel(uint8_t tx_buf[]){
 80004f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004fc:	b087      	sub	sp, #28
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	466b      	mov	r3, sp
 8000504:	461e      	mov	r6, r3
	uint8_t rx_buf[uart_rx_size];
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <poll_accel+0xc0>)
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	1e4b      	subs	r3, r1, #1
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	460a      	mov	r2, r1
 8000510:	2300      	movs	r3, #0
 8000512:	4690      	mov	r8, r2
 8000514:	4699      	mov	r9, r3
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	f04f 0300 	mov.w	r3, #0
 800051e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800052a:	460a      	mov	r2, r1
 800052c:	2300      	movs	r3, #0
 800052e:	4614      	mov	r4, r2
 8000530:	461d      	mov	r5, r3
 8000532:	f04f 0200 	mov.w	r2, #0
 8000536:	f04f 0300 	mov.w	r3, #0
 800053a:	00eb      	lsls	r3, r5, #3
 800053c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000540:	00e2      	lsls	r2, r4, #3
 8000542:	460b      	mov	r3, r1
 8000544:	3307      	adds	r3, #7
 8000546:	08db      	lsrs	r3, r3, #3
 8000548:	00db      	lsls	r3, r3, #3
 800054a:	ebad 0d03 	sub.w	sp, sp, r3
 800054e:	466b      	mov	r3, sp
 8000550:	3300      	adds	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
	HAL_StatusTypeDef valT = HAL_UART_Transmit(&huart1, &tx_buf[0], uart_tx_size, 50);
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <poll_accel+0xc4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	2332      	movs	r3, #50	; 0x32
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	4818      	ldr	r0, [pc, #96]	; (80005c0 <poll_accel+0xc8>)
 8000560:	f005 f91c 	bl	800579c <HAL_UART_Transmit>
 8000564:	4603      	mov	r3, r0
 8000566:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef valR = HAL_UART_Receive(&huart1, &rx_buf[0], uart_rx_size, 100);
 8000568:	6939      	ldr	r1, [r7, #16]
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <poll_accel+0xc0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b29a      	uxth	r2, r3
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	4813      	ldr	r0, [pc, #76]	; (80005c0 <poll_accel+0xc8>)
 8000574:	f005 f9a9 	bl	80058ca <HAL_UART_Receive>
 8000578:	4603      	mov	r3, r0
 800057a:	73bb      	strb	r3, [r7, #14]
	if(valR == HAL_TIMEOUT) {
 800057c:	7bbb      	ldrb	r3, [r7, #14]
 800057e:	2b03      	cmp	r3, #3
 8000580:	d107      	bne.n	8000592 <poll_accel+0x9a>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
		/*
		 * Occasionally the XBEE will give garbled data that sends UART into
		 * an infinite timeout loop, these statements are used to reset it
		*/
		HAL_UART_DeInit(&huart1);
 8000582:	480f      	ldr	r0, [pc, #60]	; (80005c0 <poll_accel+0xc8>)
 8000584:	f005 f8ce 	bl	8005724 <HAL_UART_DeInit>
		HAL_UART_Init(&huart1);
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <poll_accel+0xc8>)
 800058a:	f005 f87b 	bl	8005684 <HAL_UART_Init>
		return 0;
 800058e:	2300      	movs	r3, #0
 8000590:	e00b      	b.n	80005aa <poll_accel+0xb2>
	}
	return (rx_buf[uart_rx_size - 3] << 8 | rx_buf[uart_rx_size - 2]);
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <poll_accel+0xc0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3b03      	subs	r3, #3
 8000598:	693a      	ldr	r2, [r7, #16]
 800059a:	5cd3      	ldrb	r3, [r2, r3]
 800059c:	021b      	lsls	r3, r3, #8
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <poll_accel+0xc0>)
 80005a0:	6812      	ldr	r2, [r2, #0]
 80005a2:	3a02      	subs	r2, #2
 80005a4:	6939      	ldr	r1, [r7, #16]
 80005a6:	5c8a      	ldrb	r2, [r1, r2]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	46b5      	mov	sp, r6
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	371c      	adds	r7, #28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005b6:	bf00      	nop
 80005b8:	20000010 	.word	0x20000010
 80005bc:	2000000c 	.word	0x2000000c
 80005c0:	20000144 	.word	0x20000144

080005c4 <punch>:


// used by punch_logic to activate the left, right, or left and right solenoids
void punch(int left, int right) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	if(right) {
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <punch+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005da:	482f      	ldr	r0, [pc, #188]	; (8000698 <punch+0xd4>)
 80005dc:	f001 fe8a 	bl	80022f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e6:	482c      	ldr	r0, [pc, #176]	; (8000698 <punch+0xd4>)
 80005e8:	f001 fe84 	bl	80022f4 <HAL_GPIO_WritePin>
	}
	if(left){
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00b      	beq.n	800060a <punch+0x46>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f8:	4827      	ldr	r0, [pc, #156]	; (8000698 <punch+0xd4>)
 80005fa:	f001 fe7b 	bl	80022f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	4824      	ldr	r0, [pc, #144]	; (8000698 <punch+0xd4>)
 8000606:	f001 fe75 	bl	80022f4 <HAL_GPIO_WritePin>
	}
	HAL_Delay(40);
 800060a:	2028      	movs	r0, #40	; 0x28
 800060c:	f001 fae4 	bl	8001bd8 <HAL_Delay>
	if(right) {
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d00b      	beq.n	800062e <punch+0x6a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	481e      	ldr	r0, [pc, #120]	; (8000698 <punch+0xd4>)
 800061e:	f001 fe69 	bl	80022f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <punch+0xd4>)
 800062a:	f001 fe63 	bl	80022f4 <HAL_GPIO_WritePin>
	}
	if(left) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00b      	beq.n	800064c <punch+0x88>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063a:	4817      	ldr	r0, [pc, #92]	; (8000698 <punch+0xd4>)
 800063c:	f001 fe5a 	bl	80022f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <punch+0xd4>)
 8000648:	f001 fe54 	bl	80022f4 <HAL_GPIO_WritePin>
	}
	HAL_Delay(100);
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f001 fac3 	bl	8001bd8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000658:	480f      	ldr	r0, [pc, #60]	; (8000698 <punch+0xd4>)
 800065a:	f001 fe4b 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <punch+0xd4>)
 8000666:	f001 fe45 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <punch+0xd4>)
 8000672:	f001 fe3f 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067c:	4806      	ldr	r0, [pc, #24]	; (8000698 <punch+0xd4>)
 800067e:	f001 fe39 	bl	80022f4 <HAL_GPIO_WritePin>
	leftPunch = 0;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <punch+0xd8>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	rightPunch = 0;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <punch+0xdc>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
	return;
 800068e:	bf00      	nop
}
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	48000800 	.word	0x48000800
 800069c:	200001f8 	.word	0x200001f8
 80006a0:	200001fc 	.word	0x200001fc

080006a4 <punch_logic>:

// takes in the left and right accel values and activates solenoids using punch
void punch_logic(int left_accel_val, int right_accel_val) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	if(leftPunchDone) {
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <punch_logic+0x94>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00b      	beq.n	80006ce <punch_logic+0x2a>
				if(left_accel_val > punchThreshold) {
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <punch_logic+0x98>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dd0e      	ble.n	80006de <punch_logic+0x3a>
					leftPunch = 1;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <punch_logic+0x9c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
					leftPunchDone = 0;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <punch_logic+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	e007      	b.n	80006de <punch_logic+0x3a>
				}
			} else {
				if(left_accel_val < punchThreshold) {
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <punch_logic+0x98>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	da02      	bge.n	80006de <punch_logic+0x3a>
					leftPunchDone = 1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <punch_logic+0x94>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
				}
			}
			if(rightPunchDone) {
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <punch_logic+0xa0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00b      	beq.n	80006fe <punch_logic+0x5a>
				if(right_accel_val > punchThreshold) {
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <punch_logic+0x98>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	dd0e      	ble.n	800070e <punch_logic+0x6a>
					rightPunch = 1;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <punch_logic+0xa4>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
					rightPunchDone = 0;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <punch_logic+0xa0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e007      	b.n	800070e <punch_logic+0x6a>
				}
			} else {
				if(right_accel_val < punchThreshold) {
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <punch_logic+0x98>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	da02      	bge.n	800070e <punch_logic+0x6a>
					rightPunchDone = 1;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <punch_logic+0xa0>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]
				}
			}

			if (leftPunch | rightPunch) {
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <punch_logic+0x9c>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <punch_logic+0xa4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4313      	orrs	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d008      	beq.n	800072e <punch_logic+0x8a>
				punch(leftPunch, rightPunch);
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <punch_logic+0x9c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a09      	ldr	r2, [pc, #36]	; (8000748 <punch_logic+0xa4>)
 8000722:	6812      	ldr	r2, [r2, #0]
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff4c 	bl	80005c4 <punch>
			}
	return;
 800072c:	bf00      	nop
 800072e:	bf00      	nop
}
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000018 	.word	0x20000018
 800073c:	20000014 	.word	0x20000014
 8000740:	200001f8 	.word	0x200001f8
 8000744:	2000001c 	.word	0x2000001c
 8000748:	200001fc 	.word	0x200001fc

0800074c <bit_extract>:

/*
 * This functions breaks down the 4th byte extracted from the DDR pad
 * and return a char of the designated direction
 */
char bit_extract (uint8_t ddr_byte_3, uint8_t ddr_byte_4) {
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	// Grab up
	uint8_t up = (ddr_byte_3 << 3) >> 7;
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	11db      	asrs	r3, r3, #7
 8000762:	73fb      	strb	r3, [r7, #15]
	uint8_t right = (ddr_byte_3 << 2) >> 7;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	11db      	asrs	r3, r3, #7
 800076a:	73bb      	strb	r3, [r7, #14]
	uint8_t left = (ddr_byte_3 << 0) >> 7;
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	11db      	asrs	r3, r3, #7
 8000770:	737b      	strb	r3, [r7, #13]
	uint8_t down = (ddr_byte_3 << 1) >> 7;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	11db      	asrs	r3, r3, #7
 8000778:	733b      	strb	r3, [r7, #12]
	uint8_t circ = (ddr_byte_4 << 2) >> 7;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	11db      	asrs	r3, r3, #7
 8000780:	72fb      	strb	r3, [r7, #11]

	up &= (0b1);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
	right &= (0b1);
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	73bb      	strb	r3, [r7, #14]
	left &= (0b1);
 8000792:	7b7b      	ldrb	r3, [r7, #13]
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
	down &= (0b1);
 800079a:	7b3b      	ldrb	r3, [r7, #12]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	733b      	strb	r3, [r7, #12]
	circ &= (0b1);
 80007a2:	7afb      	ldrb	r3, [r7, #11]
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	72fb      	strb	r3, [r7, #11]
	if (!circ)
 80007aa:	7afb      	ldrb	r3, [r7, #11]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <bit_extract+0x68>
		return 's';
 80007b0:	2373      	movs	r3, #115	; 0x73
 80007b2:	e014      	b.n	80007de <bit_extract+0x92>
	else if(!up)
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <bit_extract+0x72>
		return 'u';
 80007ba:	2375      	movs	r3, #117	; 0x75
 80007bc:	e00f      	b.n	80007de <bit_extract+0x92>
	else if (!right)
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d101      	bne.n	80007c8 <bit_extract+0x7c>
		return 'r';
 80007c4:	2372      	movs	r3, #114	; 0x72
 80007c6:	e00a      	b.n	80007de <bit_extract+0x92>
	else if (!left)
 80007c8:	7b7b      	ldrb	r3, [r7, #13]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d101      	bne.n	80007d2 <bit_extract+0x86>
		return 'l';
 80007ce:	236c      	movs	r3, #108	; 0x6c
 80007d0:	e005      	b.n	80007de <bit_extract+0x92>
	else if (!down)
 80007d2:	7b3b      	ldrb	r3, [r7, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <bit_extract+0x90>
		return 'd';
 80007d8:	2364      	movs	r3, #100	; 0x64
 80007da:	e000      	b.n	80007de <bit_extract+0x92>

	return 'x';
 80007dc:	2378      	movs	r3, #120	; 0x78
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <poll_ddr>:

// polls the ddr pad and loads result in ddr_rx
char poll_ddr(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
	// DDR Pad Data Request - These values (ddr_rx[4] & ddr_rx[5] will be used for the movement)
	// RESET ATTN line before sent/receive
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	487c      	ldr	r0, [pc, #496]	; (80009e8 <poll_ddr+0x1fc>)
 80007f8:	f001 fd7c 	bl	80022f4 <HAL_GPIO_WritePin>

	// Transmit/Receive byte by byte
	HAL_SPI_TransmitReceive(&hspi1, &ddr_tx[0], &ddr_rx[0], 1, 100);
 80007fc:	2364      	movs	r3, #100	; 0x64
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	4a7a      	ldr	r2, [pc, #488]	; (80009ec <poll_ddr+0x200>)
 8000804:	497a      	ldr	r1, [pc, #488]	; (80009f0 <poll_ddr+0x204>)
 8000806:	487b      	ldr	r0, [pc, #492]	; (80009f4 <poll_ddr+0x208>)
 8000808:	f003 faf3 	bl	8003df2 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &ddr_tx[1], &ddr_rx[1], 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2301      	movs	r3, #1
 8000812:	4a79      	ldr	r2, [pc, #484]	; (80009f8 <poll_ddr+0x20c>)
 8000814:	4979      	ldr	r1, [pc, #484]	; (80009fc <poll_ddr+0x210>)
 8000816:	4877      	ldr	r0, [pc, #476]	; (80009f4 <poll_ddr+0x208>)
 8000818:	f003 faeb 	bl	8003df2 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &ddr_tx[2], &ddr_rx[2], 1, 100);
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	4a77      	ldr	r2, [pc, #476]	; (8000a00 <poll_ddr+0x214>)
 8000824:	4977      	ldr	r1, [pc, #476]	; (8000a04 <poll_ddr+0x218>)
 8000826:	4873      	ldr	r0, [pc, #460]	; (80009f4 <poll_ddr+0x208>)
 8000828:	f003 fae3 	bl	8003df2 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &ddr_tx[3], &ddr_rx[3], 1, 100);
 800082c:	2364      	movs	r3, #100	; 0x64
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2301      	movs	r3, #1
 8000832:	4a75      	ldr	r2, [pc, #468]	; (8000a08 <poll_ddr+0x21c>)
 8000834:	4975      	ldr	r1, [pc, #468]	; (8000a0c <poll_ddr+0x220>)
 8000836:	486f      	ldr	r0, [pc, #444]	; (80009f4 <poll_ddr+0x208>)
 8000838:	f003 fadb 	bl	8003df2 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &ddr_tx[4], &ddr_rx[4], 1, 100);
 800083c:	2364      	movs	r3, #100	; 0x64
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2301      	movs	r3, #1
 8000842:	4a73      	ldr	r2, [pc, #460]	; (8000a10 <poll_ddr+0x224>)
 8000844:	4973      	ldr	r1, [pc, #460]	; (8000a14 <poll_ddr+0x228>)
 8000846:	486b      	ldr	r0, [pc, #428]	; (80009f4 <poll_ddr+0x208>)
 8000848:	f003 fad3 	bl	8003df2 <HAL_SPI_TransmitReceive>

	// SET ATTN line after sent/receive
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	4865      	ldr	r0, [pc, #404]	; (80009e8 <poll_ddr+0x1fc>)
 8000852:	f001 fd4f 	bl	80022f4 <HAL_GPIO_WritePin>

	//calculate directional output using an 8 poll buffer
	char direction = bit_extract(ddr_rx[3], ddr_rx[4]);
 8000856:	4b65      	ldr	r3, [pc, #404]	; (80009ec <poll_ddr+0x200>)
 8000858:	78db      	ldrb	r3, [r3, #3]
 800085a:	4a64      	ldr	r2, [pc, #400]	; (80009ec <poll_ddr+0x200>)
 800085c:	7912      	ldrb	r2, [r2, #4]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff73 	bl	800074c <bit_extract>
 8000866:	4603      	mov	r3, r0
 8000868:	72fb      	strb	r3, [r7, #11]

	//update counts
	if (direction == 'u')
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	2b75      	cmp	r3, #117	; 0x75
 800086e:	d105      	bne.n	800087c <poll_ddr+0x90>
		num_u += 1;
 8000870:	4b69      	ldr	r3, [pc, #420]	; (8000a18 <poll_ddr+0x22c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a68      	ldr	r2, [pc, #416]	; (8000a18 <poll_ddr+0x22c>)
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	e028      	b.n	80008ce <poll_ddr+0xe2>
	else if (direction == 'd')
 800087c:	7afb      	ldrb	r3, [r7, #11]
 800087e:	2b64      	cmp	r3, #100	; 0x64
 8000880:	d105      	bne.n	800088e <poll_ddr+0xa2>
		num_d += 1;
 8000882:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <poll_ddr+0x230>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a64      	ldr	r2, [pc, #400]	; (8000a1c <poll_ddr+0x230>)
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	e01f      	b.n	80008ce <poll_ddr+0xe2>
	else if (direction == 'l')
 800088e:	7afb      	ldrb	r3, [r7, #11]
 8000890:	2b6c      	cmp	r3, #108	; 0x6c
 8000892:	d105      	bne.n	80008a0 <poll_ddr+0xb4>
		num_l += 1;
 8000894:	4b62      	ldr	r3, [pc, #392]	; (8000a20 <poll_ddr+0x234>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	4a61      	ldr	r2, [pc, #388]	; (8000a20 <poll_ddr+0x234>)
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e016      	b.n	80008ce <poll_ddr+0xe2>
	else if (direction == 'r')
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	2b72      	cmp	r3, #114	; 0x72
 80008a4:	d105      	bne.n	80008b2 <poll_ddr+0xc6>
		num_r += 1;
 80008a6:	4b5f      	ldr	r3, [pc, #380]	; (8000a24 <poll_ddr+0x238>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a5d      	ldr	r2, [pc, #372]	; (8000a24 <poll_ddr+0x238>)
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	e00d      	b.n	80008ce <poll_ddr+0xe2>
	else if (direction == 's')
 80008b2:	7afb      	ldrb	r3, [r7, #11]
 80008b4:	2b73      	cmp	r3, #115	; 0x73
 80008b6:	d105      	bne.n	80008c4 <poll_ddr+0xd8>
		num_s += 1;
 80008b8:	4b5b      	ldr	r3, [pc, #364]	; (8000a28 <poll_ddr+0x23c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a5a      	ldr	r2, [pc, #360]	; (8000a28 <poll_ddr+0x23c>)
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e004      	b.n	80008ce <poll_ddr+0xe2>
	else
		num_x += 1;
 80008c4:	4b59      	ldr	r3, [pc, #356]	; (8000a2c <poll_ddr+0x240>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a58      	ldr	r2, [pc, #352]	; (8000a2c <poll_ddr+0x240>)
 80008cc:	6013      	str	r3, [r2, #0]

	if (ddr_buf[ddr_buf_size - 1] == 'u')
 80008ce:	4b58      	ldr	r3, [pc, #352]	; (8000a30 <poll_ddr+0x244>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	4a57      	ldr	r2, [pc, #348]	; (8000a34 <poll_ddr+0x248>)
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	2b75      	cmp	r3, #117	; 0x75
 80008da:	d105      	bne.n	80008e8 <poll_ddr+0xfc>
		num_u -= 1;
 80008dc:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <poll_ddr+0x22c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	4a4d      	ldr	r2, [pc, #308]	; (8000a18 <poll_ddr+0x22c>)
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e038      	b.n	800095a <poll_ddr+0x16e>
	else if (ddr_buf[ddr_buf_size - 1] == 'd')
 80008e8:	4b51      	ldr	r3, [pc, #324]	; (8000a30 <poll_ddr+0x244>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4a51      	ldr	r2, [pc, #324]	; (8000a34 <poll_ddr+0x248>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	2b64      	cmp	r3, #100	; 0x64
 80008f4:	d105      	bne.n	8000902 <poll_ddr+0x116>
		num_d -= 1;
 80008f6:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <poll_ddr+0x230>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4a47      	ldr	r2, [pc, #284]	; (8000a1c <poll_ddr+0x230>)
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	e02b      	b.n	800095a <poll_ddr+0x16e>
	else if (ddr_buf[ddr_buf_size - 1] == 'l')
 8000902:	4b4b      	ldr	r3, [pc, #300]	; (8000a30 <poll_ddr+0x244>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3b01      	subs	r3, #1
 8000908:	4a4a      	ldr	r2, [pc, #296]	; (8000a34 <poll_ddr+0x248>)
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	2b6c      	cmp	r3, #108	; 0x6c
 800090e:	d105      	bne.n	800091c <poll_ddr+0x130>
		num_l -= 1;
 8000910:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <poll_ddr+0x234>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3b01      	subs	r3, #1
 8000916:	4a42      	ldr	r2, [pc, #264]	; (8000a20 <poll_ddr+0x234>)
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e01e      	b.n	800095a <poll_ddr+0x16e>
	else if (ddr_buf[ddr_buf_size - 1] == 'r')
 800091c:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <poll_ddr+0x244>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3b01      	subs	r3, #1
 8000922:	4a44      	ldr	r2, [pc, #272]	; (8000a34 <poll_ddr+0x248>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	2b72      	cmp	r3, #114	; 0x72
 8000928:	d105      	bne.n	8000936 <poll_ddr+0x14a>
		num_r -= 1;
 800092a:	4b3e      	ldr	r3, [pc, #248]	; (8000a24 <poll_ddr+0x238>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3b01      	subs	r3, #1
 8000930:	4a3c      	ldr	r2, [pc, #240]	; (8000a24 <poll_ddr+0x238>)
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	e011      	b.n	800095a <poll_ddr+0x16e>
	else if (ddr_buf[ddr_buf_size - 1] == 's')
 8000936:	4b3e      	ldr	r3, [pc, #248]	; (8000a30 <poll_ddr+0x244>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	4a3d      	ldr	r2, [pc, #244]	; (8000a34 <poll_ddr+0x248>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	2b73      	cmp	r3, #115	; 0x73
 8000942:	d105      	bne.n	8000950 <poll_ddr+0x164>
			num_s -= 1;
 8000944:	4b38      	ldr	r3, [pc, #224]	; (8000a28 <poll_ddr+0x23c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3b01      	subs	r3, #1
 800094a:	4a37      	ldr	r2, [pc, #220]	; (8000a28 <poll_ddr+0x23c>)
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e004      	b.n	800095a <poll_ddr+0x16e>
	else
		num_x -= 1;
 8000950:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <poll_ddr+0x240>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	3b01      	subs	r3, #1
 8000956:	4a35      	ldr	r2, [pc, #212]	; (8000a2c <poll_ddr+0x240>)
 8000958:	6013      	str	r3, [r2, #0]

	//update buffer
	for(int i = ddr_buf_size - 1; i > 0; i--){
 800095a:	4b35      	ldr	r3, [pc, #212]	; (8000a30 <poll_ddr+0x244>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	e00b      	b.n	800097c <poll_ddr+0x190>
		ddr_buf[i] = ddr_buf[i-1];
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3b01      	subs	r3, #1
 8000968:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <poll_ddr+0x248>)
 800096a:	5cd1      	ldrb	r1, [r2, r3]
 800096c:	4a31      	ldr	r2, [pc, #196]	; (8000a34 <poll_ddr+0x248>)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	4413      	add	r3, r2
 8000972:	460a      	mov	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
	for(int i = ddr_buf_size - 1; i > 0; i--){
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3b01      	subs	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	dcf0      	bgt.n	8000964 <poll_ddr+0x178>
	}
	ddr_buf[0] = direction;
 8000982:	4a2c      	ldr	r2, [pc, #176]	; (8000a34 <poll_ddr+0x248>)
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	7013      	strb	r3, [r2, #0]

	//return if majority
	int majority = ddr_buf_size/2 + 1;
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <poll_ddr+0x244>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	0fda      	lsrs	r2, r3, #31
 800098e:	4413      	add	r3, r2
 8000990:	105b      	asrs	r3, r3, #1
 8000992:	3301      	adds	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
	if (num_u >= majority)
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <poll_ddr+0x22c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dc01      	bgt.n	80009a4 <poll_ddr+0x1b8>
		return 'u';
 80009a0:	2375      	movs	r3, #117	; 0x75
 80009a2:	e01c      	b.n	80009de <poll_ddr+0x1f2>
	else if (num_d >= majority)
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <poll_ddr+0x230>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dc01      	bgt.n	80009b2 <poll_ddr+0x1c6>
		return 'd';
 80009ae:	2364      	movs	r3, #100	; 0x64
 80009b0:	e015      	b.n	80009de <poll_ddr+0x1f2>
	else if (num_l >= majority)
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <poll_ddr+0x234>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dc01      	bgt.n	80009c0 <poll_ddr+0x1d4>
		return 'l';
 80009bc:	236c      	movs	r3, #108	; 0x6c
 80009be:	e00e      	b.n	80009de <poll_ddr+0x1f2>
	else if (num_r >= majority)
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <poll_ddr+0x238>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	dc01      	bgt.n	80009ce <poll_ddr+0x1e2>
		return 'r';
 80009ca:	2372      	movs	r3, #114	; 0x72
 80009cc:	e007      	b.n	80009de <poll_ddr+0x1f2>
	else if (num_s >= majority)
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <poll_ddr+0x23c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dc01      	bgt.n	80009dc <poll_ddr+0x1f0>
		return 's';
 80009d8:	2373      	movs	r3, #115	; 0x73
 80009da:	e000      	b.n	80009de <poll_ddr+0x1f2>
	else
		return 'x';
 80009dc:	2378      	movs	r3, #120	; 0x78

}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	48000400 	.word	0x48000400
 80009ec:	200001d4 	.word	0x200001d4
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000048 	.word	0x20000048
 80009f8:	200001d5 	.word	0x200001d5
 80009fc:	20000001 	.word	0x20000001
 8000a00:	200001d6 	.word	0x200001d6
 8000a04:	20000002 	.word	0x20000002
 8000a08:	200001d7 	.word	0x200001d7
 8000a0c:	20000003 	.word	0x20000003
 8000a10:	200001d8 	.word	0x200001d8
 8000a14:	20000004 	.word	0x20000004
 8000a18:	200001e0 	.word	0x200001e0
 8000a1c:	200001e4 	.word	0x200001e4
 8000a20:	200001e8 	.word	0x200001e8
 8000a24:	200001ec 	.word	0x200001ec
 8000a28:	200001f0 	.word	0x200001f0
 8000a2c:	200001f4 	.word	0x200001f4
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200001dc 	.word	0x200001dc

08000a38 <left_pos_change>:

// FOR THE CODE BELOW YOU MIGHT NEED TO HAVE IT STOP ACCEPTING INPUT IF THE X OR Y DIRECTION REACHES ITS MINIMUM/MAXIMUM

// Increase or Decrease left Servo position
int left_pos_change (char dir) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	int extend = 2100;
 8000a42:	f640 0334 	movw	r3, #2100	; 0x834
 8000a46:	617b      	str	r3, [r7, #20]
	int dodge = 1900;
 8000a48:	f240 736c 	movw	r3, #1900	; 0x76c
 8000a4c:	613b      	str	r3, [r7, #16]
	int retract = 1500;
 8000a4e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000a52:	60fb      	str	r3, [r7, #12]
	int neutral = 1700;
 8000a54:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8000a58:	60bb      	str	r3, [r7, #8]
	// Change Servo Position based on input from DDR pad
	switch(dir) {
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	3b64      	subs	r3, #100	; 0x64
 8000a5e:	2b11      	cmp	r3, #17
 8000a60:	d82e      	bhi.n	8000ac0 <left_pos_change+0x88>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <left_pos_change+0x30>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000ab5 	.word	0x08000ab5
 8000a6c:	08000ac1 	.word	0x08000ac1
 8000a70:	08000ac1 	.word	0x08000ac1
 8000a74:	08000ac1 	.word	0x08000ac1
 8000a78:	08000ac1 	.word	0x08000ac1
 8000a7c:	08000ac1 	.word	0x08000ac1
 8000a80:	08000ac1 	.word	0x08000ac1
 8000a84:	08000ac1 	.word	0x08000ac1
 8000a88:	08000ab9 	.word	0x08000ab9
 8000a8c:	08000ac1 	.word	0x08000ac1
 8000a90:	08000ac1 	.word	0x08000ac1
 8000a94:	08000ac1 	.word	0x08000ac1
 8000a98:	08000ac1 	.word	0x08000ac1
 8000a9c:	08000ac1 	.word	0x08000ac1
 8000aa0:	08000abd 	.word	0x08000abd
 8000aa4:	08000ac1 	.word	0x08000ac1
 8000aa8:	08000ac1 	.word	0x08000ac1
 8000aac:	08000ab1 	.word	0x08000ab1
	case 'u':
		return extend;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	e006      	b.n	8000ac2 <left_pos_change+0x8a>
	case 'd':
		return retract;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	e004      	b.n	8000ac2 <left_pos_change+0x8a>
	case 'l':
		return retract;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	e002      	b.n	8000ac2 <left_pos_change+0x8a>
	case 'r':
		return dodge;
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	e000      	b.n	8000ac2 <left_pos_change+0x8a>
	default:
		return neutral;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
	}
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	371c      	adds	r7, #28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <right_pos_change>:

// Increase or Decrease right Servo position
int right_pos_change (char dir) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	int extend = 900;
 8000ada:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000ade:	617b      	str	r3, [r7, #20]
	int dodge = 1100;
 8000ae0:	f240 434c 	movw	r3, #1100	; 0x44c
 8000ae4:	613b      	str	r3, [r7, #16]
	int retract = 1500;
 8000ae6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000aea:	60fb      	str	r3, [r7, #12]
	int neutral = 1300;
 8000aec:	f240 5314 	movw	r3, #1300	; 0x514
 8000af0:	60bb      	str	r3, [r7, #8]
	// Change Servo Position based on input from DDR pad
	switch(dir) {
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	3b64      	subs	r3, #100	; 0x64
 8000af6:	2b11      	cmp	r3, #17
 8000af8:	d82e      	bhi.n	8000b58 <right_pos_change+0x88>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <right_pos_change+0x30>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b4d 	.word	0x08000b4d
 8000b04:	08000b59 	.word	0x08000b59
 8000b08:	08000b59 	.word	0x08000b59
 8000b0c:	08000b59 	.word	0x08000b59
 8000b10:	08000b59 	.word	0x08000b59
 8000b14:	08000b59 	.word	0x08000b59
 8000b18:	08000b59 	.word	0x08000b59
 8000b1c:	08000b59 	.word	0x08000b59
 8000b20:	08000b51 	.word	0x08000b51
 8000b24:	08000b59 	.word	0x08000b59
 8000b28:	08000b59 	.word	0x08000b59
 8000b2c:	08000b59 	.word	0x08000b59
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	08000b59 	.word	0x08000b59
 8000b38:	08000b55 	.word	0x08000b55
 8000b3c:	08000b59 	.word	0x08000b59
 8000b40:	08000b59 	.word	0x08000b59
 8000b44:	08000b49 	.word	0x08000b49
	case 'u':
		return extend;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	e006      	b.n	8000b5a <right_pos_change+0x8a>
	case 'd':
		return retract;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	e004      	b.n	8000b5a <right_pos_change+0x8a>
	case 'l':
		return dodge;
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	e002      	b.n	8000b5a <right_pos_change+0x8a>
	case 'r':
		return retract;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	e000      	b.n	8000b5a <right_pos_change+0x8a>
	default:
		return neutral;
 8000b58:	68bb      	ldr	r3, [r7, #8]
	}
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <move>:


// takes ddr data in rx_buf and writes to the servos
void move(char direction) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]

	// Send Info to left and right servos
	int left_pos = left_pos_change(direction);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5f 	bl	8000a38 <left_pos_change>
 8000b7a:	60f8      	str	r0, [r7, #12]
	int right_pos = right_pos_change(direction);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffa6 	bl	8000ad0 <right_pos_change>
 8000b84:	60b8      	str	r0, [r7, #8]
	//leftpos = 1100 rightpos = 1900 is back
	//leftpos = 1900 rightpos = 1100 is front
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, left_pos);
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <move+0x38>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, right_pos);
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <move+0x3c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8000b96:	bf00      	nop
}
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000f8 	.word	0x200000f8
 8000ba4:	200000ac 	.word	0x200000ac

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bac:	b08a      	sub	sp, #40	; 0x28
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 ff9d 	bl	8001aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f968 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 fb5c 	bl	8001274 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bbc:	f000 f9aa 	bl	8000f14 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000bc0:	f000 fa94 	bl	80010ec <MX_TIM4_Init>
  MX_TIM1_Init();
 8000bc4:	f000 f9e4 	bl	8000f90 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000bc8:	f000 fb08 	bl	80011dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	//Reset all GPIO pins
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd2:	48a5      	ldr	r0, [pc, #660]	; (8000e68 <main+0x2c0>)
 8000bd4:	f001 fb8e 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bde:	48a2      	ldr	r0, [pc, #648]	; (8000e68 <main+0x2c0>)
 8000be0:	f001 fb88 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	489f      	ldr	r0, [pc, #636]	; (8000e68 <main+0x2c0>)
 8000bec:	f001 fb82 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf6:	489c      	ldr	r0, [pc, #624]	; (8000e68 <main+0x2c0>)
 8000bf8:	f001 fb7c 	bl	80022f4 <HAL_GPIO_WritePin>

	//Set buffers to XBEE polling commands
	uint8_t left_tx_buf[uart_tx_size];
 8000bfc:	4b9b      	ldr	r3, [pc, #620]	; (8000e6c <main+0x2c4>)
 8000bfe:	6819      	ldr	r1, [r3, #0]
 8000c00:	1e4b      	subs	r3, r1, #1
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	460a      	mov	r2, r1
 8000c06:	2300      	movs	r3, #0
 8000c08:	603a      	str	r2, [r7, #0]
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	00c3      	lsls	r3, r0, #3
 8000c18:	6838      	ldr	r0, [r7, #0]
 8000c1a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c1e:	6838      	ldr	r0, [r7, #0]
 8000c20:	00c2      	lsls	r2, r0, #3
 8000c22:	460a      	mov	r2, r1
 8000c24:	2300      	movs	r3, #0
 8000c26:	4692      	mov	sl, r2
 8000c28:	469b      	mov	fp, r3
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000c36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000c3e:	460b      	mov	r3, r1
 8000c40:	3307      	adds	r3, #7
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	ebad 0d03 	sub.w	sp, sp, r3
 8000c4a:	466b      	mov	r3, sp
 8000c4c:	3300      	adds	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
	uint8_t right_tx_buf[uart_tx_size];
 8000c50:	4b86      	ldr	r3, [pc, #536]	; (8000e6c <main+0x2c4>)
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	1e4b      	subs	r3, r1, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	460a      	mov	r2, r1
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	4690      	mov	r8, r2
 8000c5e:	4699      	mov	r9, r3
 8000c60:	f04f 0200 	mov.w	r2, #0
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c74:	460a      	mov	r2, r1
 8000c76:	2300      	movs	r3, #0
 8000c78:	4614      	mov	r4, r2
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	00eb      	lsls	r3, r5, #3
 8000c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c8a:	00e2      	lsls	r2, r4, #3
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	3307      	adds	r3, #7
 8000c90:	08db      	lsrs	r3, r3, #3
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	ebad 0d03 	sub.w	sp, sp, r3
 8000c98:	466b      	mov	r3, sp
 8000c9a:	3300      	adds	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]

	//LEFT HAND "OK TAPE"
	left_tx_buf[0] = 0x7E;
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	227e      	movs	r2, #126	; 0x7e
 8000ca2:	701a      	strb	r2, [r3, #0]
	left_tx_buf[1] = 0x00;
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	705a      	strb	r2, [r3, #1]
	left_tx_buf[2] = 0x0F;
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	220f      	movs	r2, #15
 8000cae:	709a      	strb	r2, [r3, #2]
	left_tx_buf[3] = 0x17;
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2217      	movs	r2, #23
 8000cb4:	70da      	strb	r2, [r3, #3]
	left_tx_buf[4] = 0x01;
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	711a      	strb	r2, [r3, #4]
	left_tx_buf[5] = 0x00;
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	715a      	strb	r2, [r3, #5]
	left_tx_buf[6] = 0x13;
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2213      	movs	r2, #19
 8000cc6:	719a      	strb	r2, [r3, #6]
	left_tx_buf[7] = 0xA2;
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	22a2      	movs	r2, #162	; 0xa2
 8000ccc:	71da      	strb	r2, [r3, #7]
	left_tx_buf[8] = 0x00;
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	721a      	strb	r2, [r3, #8]
	left_tx_buf[9] = 0x40;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2240      	movs	r2, #64	; 0x40
 8000cd8:	725a      	strb	r2, [r3, #9]
	left_tx_buf[10] = 0xDC;
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	22dc      	movs	r2, #220	; 0xdc
 8000cde:	729a      	strb	r2, [r3, #10]
	left_tx_buf[11] = 0xEB;
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	22eb      	movs	r2, #235	; 0xeb
 8000ce4:	72da      	strb	r2, [r3, #11]
	left_tx_buf[12] = 0x52;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	2252      	movs	r2, #82	; 0x52
 8000cea:	731a      	strb	r2, [r3, #12]
	left_tx_buf[13] = 0xFF;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	22ff      	movs	r2, #255	; 0xff
 8000cf0:	735a      	strb	r2, [r3, #13]
	left_tx_buf[14] = 0xFE;
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	22fe      	movs	r2, #254	; 0xfe
 8000cf6:	739a      	strb	r2, [r3, #14]
	left_tx_buf[15] = 0x02;
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	73da      	strb	r2, [r3, #15]
	left_tx_buf[16] = 0x69;
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2269      	movs	r2, #105	; 0x69
 8000d02:	741a      	strb	r2, [r3, #16]
	left_tx_buf[17] = 0x73;
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	2273      	movs	r2, #115	; 0x73
 8000d08:	745a      	strb	r2, [r3, #17]
	left_tx_buf[18] = 0xFE;
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	22fe      	movs	r2, #254	; 0xfe
 8000d0e:	749a      	strb	r2, [r3, #18]

	//RIGHT HAND "OK"
	right_tx_buf[0] = 0x7E;
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	227e      	movs	r2, #126	; 0x7e
 8000d14:	701a      	strb	r2, [r3, #0]
	right_tx_buf[1] = 0x00;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	705a      	strb	r2, [r3, #1]
	right_tx_buf[2] = 0x0F;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	220f      	movs	r2, #15
 8000d20:	709a      	strb	r2, [r3, #2]
	right_tx_buf[3] = 0x17;
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	2217      	movs	r2, #23
 8000d26:	70da      	strb	r2, [r3, #3]
	right_tx_buf[4] = 0x01;
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	711a      	strb	r2, [r3, #4]
	right_tx_buf[5] = 0x00;
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	2200      	movs	r2, #0
 8000d32:	715a      	strb	r2, [r3, #5]
	right_tx_buf[6] = 0x13;
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	2213      	movs	r2, #19
 8000d38:	719a      	strb	r2, [r3, #6]
	right_tx_buf[7] = 0xA2;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	22a2      	movs	r2, #162	; 0xa2
 8000d3e:	71da      	strb	r2, [r3, #7]
	right_tx_buf[8] = 0x00;
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	2200      	movs	r2, #0
 8000d44:	721a      	strb	r2, [r3, #8]
	right_tx_buf[9] = 0x40;
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	2240      	movs	r2, #64	; 0x40
 8000d4a:	725a      	strb	r2, [r3, #9]
	right_tx_buf[10] = 0xDC;
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	22dc      	movs	r2, #220	; 0xdc
 8000d50:	729a      	strb	r2, [r3, #10]
	right_tx_buf[11] = 0x2F;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	222f      	movs	r2, #47	; 0x2f
 8000d56:	72da      	strb	r2, [r3, #11]
	right_tx_buf[12] = 0x3A;
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	223a      	movs	r2, #58	; 0x3a
 8000d5c:	731a      	strb	r2, [r3, #12]
	right_tx_buf[13] = 0xFF;
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	22ff      	movs	r2, #255	; 0xff
 8000d62:	735a      	strb	r2, [r3, #13]
	right_tx_buf[14] = 0xFE;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	22fe      	movs	r2, #254	; 0xfe
 8000d68:	739a      	strb	r2, [r3, #14]
	right_tx_buf[15] = 0x02;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	73da      	strb	r2, [r3, #15]
	right_tx_buf[16] = 0x69;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	2269      	movs	r2, #105	; 0x69
 8000d74:	741a      	strb	r2, [r3, #16]
	right_tx_buf[17] = 0x73;
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	2273      	movs	r2, #115	; 0x73
 8000d7a:	745a      	strb	r2, [r3, #17]
	right_tx_buf[18] = 0xD2;
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	22d2      	movs	r2, #210	; 0xd2
 8000d80:	749a      	strb	r2, [r3, #18]

	// Dance Dance Revolution Pad Set-up/Variables

	// This is for the Attention Line for DDR pad (GPIO_Output)
	// *PLEASE NOTE* - the ATTN Line must be RESET before a Transmit/Receive through SPI and then must be SET after
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	483a      	ldr	r0, [pc, #232]	; (8000e70 <main+0x2c8>)
 8000d88:	f001 fab4 	bl	80022f4 <HAL_GPIO_WritePin>
	for(int i = 0; i < ddr_buf_size; i++){
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d90:	e00c      	b.n	8000dac <main+0x204>
		ddr_buf[i] = 'x';
 8000d92:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <main+0x2cc>)
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	4413      	add	r3, r2
 8000d98:	2278      	movs	r2, #120	; 0x78
 8000d9a:	701a      	strb	r2, [r3, #0]
		num_x += 1;
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <main+0x2d0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a35      	ldr	r2, [pc, #212]	; (8000e78 <main+0x2d0>)
 8000da4:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < ddr_buf_size; i++){
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	3301      	adds	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
 8000dac:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <main+0x2d4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db2:	429a      	cmp	r2, r3
 8000db4:	dbed      	blt.n	8000d92 <main+0x1ea>
	}

	// Start up PWM Timers
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000db6:	2108      	movs	r1, #8
 8000db8:	4831      	ldr	r0, [pc, #196]	; (8000e80 <main+0x2d8>)
 8000dba:	f003 fc49 	bl	8004650 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4830      	ldr	r0, [pc, #192]	; (8000e84 <main+0x2dc>)
 8000dc2:	f003 fc45 	bl	8004650 <HAL_TIM_PWM_Start>

	char game_start = 'x';
 8000dc6:	2378      	movs	r3, #120	; 0x78
 8000dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while(game_start != 's'){
 8000dcc:	e004      	b.n	8000dd8 <main+0x230>
		game_start = poll_ddr();
 8000dce:	f7ff fd0d 	bl	80007ec <poll_ddr>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while(game_start != 's'){
 8000dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ddc:	2b73      	cmp	r3, #115	; 0x73
 8000dde:	d1f6      	bne.n	8000dce <main+0x226>
	}
	while(game_start == 's'){
 8000de0:	e004      	b.n	8000dec <main+0x244>
		game_start = poll_ddr();
 8000de2:	f7ff fd03 	bl	80007ec <poll_ddr>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while(game_start == 's'){
 8000dec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000df0:	2b73      	cmp	r3, #115	; 0x73
 8000df2:	d0f6      	beq.n	8000de2 <main+0x23a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Left and Right Accelerometer Values
		int left_accel_val = poll_accel(left_tx_buf);
 8000df4:	69b8      	ldr	r0, [r7, #24]
 8000df6:	f7ff fb7f 	bl	80004f8 <poll_accel>
 8000dfa:	60f8      	str	r0, [r7, #12]
		int right_accel_val = poll_accel(right_tx_buf);
 8000dfc:	6938      	ldr	r0, [r7, #16]
 8000dfe:	f7ff fb7b 	bl	80004f8 <poll_accel>
 8000e02:	60b8      	str	r0, [r7, #8]
		punch_logic(left_accel_val, right_accel_val);
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f7ff fc4c 	bl	80006a4 <punch_logic>
		char direction = poll_ddr();
 8000e0c:	f7ff fcee 	bl	80007ec <poll_ddr>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		if(direction == 's') {
 8000e16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e1a:	2b73      	cmp	r3, #115	; 0x73
 8000e1c:	d11d      	bne.n	8000e5a <main+0x2b2>

			// Toggle On/Off
			while(direction == 's'){
 8000e1e:	e004      	b.n	8000e2a <main+0x282>
				direction = poll_ddr();
 8000e20:	f7ff fce4 	bl	80007ec <poll_ddr>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			while(direction == 's'){
 8000e2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e2e:	2b73      	cmp	r3, #115	; 0x73
 8000e30:	d0f6      	beq.n	8000e20 <main+0x278>
			}
			while(direction != 's'){
 8000e32:	e004      	b.n	8000e3e <main+0x296>
				direction = poll_ddr();
 8000e34:	f7ff fcda 	bl	80007ec <poll_ddr>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			while(direction != 's'){
 8000e3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e42:	2b73      	cmp	r3, #115	; 0x73
 8000e44:	d1f6      	bne.n	8000e34 <main+0x28c>
			}
			while(direction == 's'){
 8000e46:	e004      	b.n	8000e52 <main+0x2aa>
				direction = poll_ddr();
 8000e48:	f7ff fcd0 	bl	80007ec <poll_ddr>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			while(direction == 's'){
 8000e52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e56:	2b73      	cmp	r3, #115	; 0x73
 8000e58:	d0f6      	beq.n	8000e48 <main+0x2a0>
			}

		}
		move(direction);
 8000e5a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fe82 	bl	8000b68 <move>
	{
 8000e64:	e7c6      	b.n	8000df4 <main+0x24c>
 8000e66:	bf00      	nop
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	48000400 	.word	0x48000400
 8000e74:	200001dc 	.word	0x200001dc
 8000e78:	200001f4 	.word	0x200001f4
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200000f8 	.word	0x200000f8
 8000e84:	200000ac 	.word	0x200000ac

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b096      	sub	sp, #88	; 0x58
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2244      	movs	r2, #68	; 0x44
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f005 fba0 	bl	80065dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eaa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eae:	f001 fa59 	bl	8002364 <HAL_PWREx_ControlVoltageScaling>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000eb8:	f000 fbe4 	bl	8001684 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ec8:	2360      	movs	r3, #96	; 0x60
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 faf9 	bl	80024cc <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ee0:	f000 fbd0 	bl	8001684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 feff 	bl	8002d00 <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f08:	f000 fbbc 	bl	8001684 <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3758      	adds	r7, #88	; 0x58
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <MX_SPI1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f62:	2207      	movs	r2, #7
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f74:	f002 fe9a 	bl	8003cac <HAL_SPI_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 fb81 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000048 	.word	0x20000048
 8000f8c:	40013000 	.word	0x40013000

08000f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09a      	sub	sp, #104	; 0x68
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	222c      	movs	r2, #44	; 0x2c
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 fb06 	bl	80065dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd0:	4b44      	ldr	r3, [pc, #272]	; (80010e4 <MX_TIM1_Init+0x154>)
 8000fd2:	4a45      	ldr	r2, [pc, #276]	; (80010e8 <MX_TIM1_Init+0x158>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <MX_TIM1_Init+0x154>)
 8000fd8:	2203      	movs	r2, #3
 8000fda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <MX_TIM1_Init+0x154>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <MX_TIM1_Init+0x154>)
 8000fe4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fe8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <MX_TIM1_Init+0x154>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff0:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <MX_TIM1_Init+0x154>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <MX_TIM1_Init+0x154>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ffc:	4839      	ldr	r0, [pc, #228]	; (80010e4 <MX_TIM1_Init+0x154>)
 8000ffe:	f003 fa6f 	bl	80044e0 <HAL_TIM_Base_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001008:	f000 fb3c 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001016:	4619      	mov	r1, r3
 8001018:	4832      	ldr	r0, [pc, #200]	; (80010e4 <MX_TIM1_Init+0x154>)
 800101a:	f003 fd33 	bl	8004a84 <HAL_TIM_ConfigClockSource>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001024:	f000 fb2e 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001028:	482e      	ldr	r0, [pc, #184]	; (80010e4 <MX_TIM1_Init+0x154>)
 800102a:	f003 fab0 	bl	800458e <HAL_TIM_PWM_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001034:	f000 fb26 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001044:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001048:	4619      	mov	r1, r3
 800104a:	4826      	ldr	r0, [pc, #152]	; (80010e4 <MX_TIM1_Init+0x154>)
 800104c:	f004 fa14 	bl	8005478 <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001056:	f000 fb15 	bl	8001684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105a:	2360      	movs	r3, #96	; 0x60
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1300;
 800105e:	f240 5314 	movw	r3, #1300	; 0x514
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001064:	2300      	movs	r3, #0
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001068:	2300      	movs	r3, #0
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800107c:	2200      	movs	r2, #0
 800107e:	4619      	mov	r1, r3
 8001080:	4818      	ldr	r0, [pc, #96]	; (80010e4 <MX_TIM1_Init+0x154>)
 8001082:	f003 fbeb 	bl	800485c <HAL_TIM_PWM_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800108c:	f000 fafa 	bl	8001684 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4807      	ldr	r0, [pc, #28]	; (80010e4 <MX_TIM1_Init+0x154>)
 80010c6:	f004 fa5f 	bl	8005588 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80010d0:	f000 fad8 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <MX_TIM1_Init+0x154>)
 80010d6:	f000 fbc7 	bl	8001868 <HAL_TIM_MspPostInit>

}
 80010da:	bf00      	nop
 80010dc:	3768      	adds	r7, #104	; 0x68
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000ac 	.word	0x200000ac
 80010e8:	40012c00 	.word	0x40012c00

080010ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <MX_TIM4_Init+0xe8>)
 8001120:	4a2d      	ldr	r2, [pc, #180]	; (80011d8 <MX_TIM4_Init+0xec>)
 8001122:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <MX_TIM4_Init+0xe8>)
 8001126:	2203      	movs	r2, #3
 8001128:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <MX_TIM4_Init+0xe8>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <MX_TIM4_Init+0xe8>)
 8001132:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001136:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <MX_TIM4_Init+0xe8>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <MX_TIM4_Init+0xe8>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001144:	4823      	ldr	r0, [pc, #140]	; (80011d4 <MX_TIM4_Init+0xe8>)
 8001146:	f003 f9cb 	bl	80044e0 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001150:	f000 fa98 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115e:	4619      	mov	r1, r3
 8001160:	481c      	ldr	r0, [pc, #112]	; (80011d4 <MX_TIM4_Init+0xe8>)
 8001162:	f003 fc8f 	bl	8004a84 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800116c:	f000 fa8a 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <MX_TIM4_Init+0xe8>)
 8001172:	f003 fa0c 	bl	800458e <HAL_TIM_PWM_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800117c:	f000 fa82 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4811      	ldr	r0, [pc, #68]	; (80011d4 <MX_TIM4_Init+0xe8>)
 8001190:	f004 f972 	bl	8005478 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800119a:	f000 fa73 	bl	8001684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119e:	2360      	movs	r3, #96	; 0x60
 80011a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1700;
 80011a2:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80011a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	2208      	movs	r2, #8
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <MX_TIM4_Init+0xe8>)
 80011b8:	f003 fb50 	bl	800485c <HAL_TIM_PWM_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80011c2:	f000 fa5f 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <MX_TIM4_Init+0xe8>)
 80011c8:	f000 fb4e 	bl	8001868 <HAL_TIM_MspPostInit>

}
 80011cc:	bf00      	nop
 80011ce:	3738      	adds	r7, #56	; 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000f8 	.word	0x200000f8
 80011d8:	40000800 	.word	0x40000800

080011dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <MX_USART1_UART_Init+0x90>)
 80011e2:	4a23      	ldr	r2, [pc, #140]	; (8001270 <MX_USART1_UART_Init+0x94>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_USART1_UART_Init+0x90>)
 80011e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_USART1_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_USART1_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_USART1_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_USART1_UART_Init+0x90>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_USART1_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_USART1_UART_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_USART1_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_USART1_UART_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_USART1_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001224:	4811      	ldr	r0, [pc, #68]	; (800126c <MX_USART1_UART_Init+0x90>)
 8001226:	f004 fa2d 	bl	8005684 <HAL_UART_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001230:	f000 fa28 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001234:	2100      	movs	r1, #0
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_USART1_UART_Init+0x90>)
 8001238:	f005 f906 	bl	8006448 <HAL_UARTEx_SetTxFifoThreshold>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001242:	f000 fa1f 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001246:	2100      	movs	r1, #0
 8001248:	4808      	ldr	r0, [pc, #32]	; (800126c <MX_USART1_UART_Init+0x90>)
 800124a:	f005 f93b 	bl	80064c4 <HAL_UARTEx_SetRxFifoThreshold>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001254:	f000 fa16 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_USART1_UART_Init+0x90>)
 800125a:	f005 f8bc 	bl	80063d6 <HAL_UARTEx_DisableFifoMode>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001264:	f000 fa0e 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000144 	.word	0x20000144
 8001270:	40013800 	.word	0x40013800

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800128a:	4bb3      	ldr	r3, [pc, #716]	; (8001558 <MX_GPIO_Init+0x2e4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4ab2      	ldr	r2, [pc, #712]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4bb0      	ldr	r3, [pc, #704]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	623b      	str	r3, [r7, #32]
 80012a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4bad      	ldr	r3, [pc, #692]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4aac      	ldr	r2, [pc, #688]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4baa      	ldr	r3, [pc, #680]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ba:	4ba7      	ldr	r3, [pc, #668]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4aa6      	ldr	r2, [pc, #664]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4ba4      	ldr	r3, [pc, #656]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	4ba1      	ldr	r3, [pc, #644]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4aa0      	ldr	r2, [pc, #640]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b9e      	ldr	r3, [pc, #632]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b9b      	ldr	r3, [pc, #620]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a9a      	ldr	r2, [pc, #616]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b98      	ldr	r3, [pc, #608]	; (8001558 <MX_GPIO_Init+0x2e4>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b95      	ldr	r3, [pc, #596]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a94      	ldr	r2, [pc, #592]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b92      	ldr	r3, [pc, #584]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	4b8f      	ldr	r3, [pc, #572]	; (8001558 <MX_GPIO_Init+0x2e4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a8e      	ldr	r2, [pc, #568]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b8c      	ldr	r3, [pc, #560]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	4b89      	ldr	r3, [pc, #548]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a88      	ldr	r2, [pc, #544]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b86      	ldr	r3, [pc, #536]	; (8001558 <MX_GPIO_Init+0x2e4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800134a:	f001 f8af 	bl	80024ac <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001354:	4881      	ldr	r0, [pc, #516]	; (800155c <MX_GPIO_Init+0x2e8>)
 8001356:	f000 ffcd 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2140      	movs	r1, #64	; 0x40
 800135e:	4880      	ldr	r0, [pc, #512]	; (8001560 <MX_GPIO_Init+0x2ec>)
 8001360:	f000 ffc8 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001364:	230c      	movs	r3, #12
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001374:	230d      	movs	r3, #13
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4879      	ldr	r0, [pc, #484]	; (8001564 <MX_GPIO_Init+0x2f0>)
 8001380:	f000 fd34 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001384:	2307      	movs	r3, #7
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001388:	2312      	movs	r3, #18
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001394:	2304      	movs	r3, #4
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4872      	ldr	r0, [pc, #456]	; (8001568 <MX_GPIO_Init+0x2f4>)
 80013a0:	f000 fd24 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013b4:	230d      	movs	r3, #13
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	4619      	mov	r1, r3
 80013be:	486a      	ldr	r0, [pc, #424]	; (8001568 <MX_GPIO_Init+0x2f4>)
 80013c0:	f000 fd14 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013c4:	233f      	movs	r3, #63	; 0x3f
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013c8:	230b      	movs	r3, #11
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4861      	ldr	r0, [pc, #388]	; (800155c <MX_GPIO_Init+0x2e8>)
 80013d8:	f000 fd08 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013dc:	2301      	movs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ec:	2301      	movs	r3, #1
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f000 fcf7 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80013fe:	230a      	movs	r3, #10
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001402:	230b      	movs	r3, #11
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f000 fcea 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001418:	2302      	movs	r3, #2
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800141c:	230b      	movs	r3, #11
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	484d      	ldr	r0, [pc, #308]	; (8001560 <MX_GPIO_Init+0x2ec>)
 800142c:	f000 fcde 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001430:	2304      	movs	r3, #4
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001434:	2303      	movs	r3, #3
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4847      	ldr	r0, [pc, #284]	; (8001560 <MX_GPIO_Init+0x2ec>)
 8001444:	f000 fcd2 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800145a:	2301      	movs	r3, #1
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	483e      	ldr	r0, [pc, #248]	; (8001560 <MX_GPIO_Init+0x2ec>)
 8001466:	f000 fcc1 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800146a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800147c:	230d      	movs	r3, #13
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4836      	ldr	r0, [pc, #216]	; (8001560 <MX_GPIO_Init+0x2ec>)
 8001488:	f000 fcb0 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800148c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800149e:	230e      	movs	r3, #14
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	482d      	ldr	r0, [pc, #180]	; (8001560 <MX_GPIO_Init+0x2ec>)
 80014aa:	f000 fc9f 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c0:	2307      	movs	r3, #7
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4828      	ldr	r0, [pc, #160]	; (800156c <MX_GPIO_Init+0x2f8>)
 80014cc:	f000 fc8e 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014e2:	2308      	movs	r3, #8
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4820      	ldr	r0, [pc, #128]	; (8001570 <MX_GPIO_Init+0x2fc>)
 80014ee:	f000 fc7d 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014f2:	2340      	movs	r3, #64	; 0x40
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001502:	230d      	movs	r3, #13
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <MX_GPIO_Init+0x2e8>)
 800150e:	f000 fc6d 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001522:	2302      	movs	r3, #2
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <MX_GPIO_Init+0x2e8>)
 800152e:	f000 fc5d 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001532:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_GPIO_Init+0x2e8>)
 800154c:	f000 fc4e 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001550:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001554:	e00e      	b.n	8001574 <MX_GPIO_Init+0x300>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	48000800 	.word	0x48000800
 8001560:	48000400 	.word	0x48000400
 8001564:	48001000 	.word	0x48001000
 8001568:	48001400 	.word	0x48001400
 800156c:	48000c00 	.word	0x48000c00
 8001570:	48001800 	.word	0x48001800
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001582:	230a      	movs	r3, #10
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001590:	f000 fc2c 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ac:	f000 fc1e 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015c2:	230c      	movs	r3, #12
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ca:	4619      	mov	r1, r3
 80015cc:	482a      	ldr	r0, [pc, #168]	; (8001678 <MX_GPIO_Init+0x404>)
 80015ce:	f000 fc0d 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015d2:	2301      	movs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015e2:	2309      	movs	r3, #9
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	4823      	ldr	r0, [pc, #140]	; (800167c <MX_GPIO_Init+0x408>)
 80015ee:	f000 fbfd 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f2:	2304      	movs	r3, #4
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001602:	230c      	movs	r3, #12
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	481b      	ldr	r0, [pc, #108]	; (800167c <MX_GPIO_Init+0x408>)
 800160e:	f000 fbed 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001612:	2378      	movs	r3, #120	; 0x78
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001622:	2307      	movs	r3, #7
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_GPIO_Init+0x408>)
 800162e:	f000 fbdd 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001632:	2338      	movs	r3, #56	; 0x38
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001642:	2306      	movs	r3, #6
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_GPIO_Init+0x40c>)
 800164e:	f000 fbcd 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_GPIO_Init+0x40c>)
 800166a:	f000 fbbf 	bl	8001dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166e:	bf00      	nop
 8001670:	3738      	adds	r7, #56	; 0x38
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	48000800 	.word	0x48000800
 800167c:	48000c00 	.word	0x48000c00
 8001680:	48000400 	.word	0x48000400

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x44>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_MspInit+0x44>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6613      	str	r3, [r2, #96]	; 0x60
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x44>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_MspInit+0x44>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x44>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x44>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_SPI_MspInit+0x7c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d128      	bne.n	800174c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_SPI_MspInit+0x80>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	4a16      	ldr	r2, [pc, #88]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001700:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001704:	6613      	str	r3, [r2, #96]	; 0x60
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800172a:	23f0      	movs	r3, #240	; 0xf0
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800173a:	2305      	movs	r3, #5
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f000 fb50 	bl	8001dec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40013000 	.word	0x40013000
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a37      	ldr	r2, [pc, #220]	; (8001858 <HAL_TIM_Base_MspInit+0xfc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d13a      	bne.n	80017f4 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001782:	4a36      	ldr	r2, [pc, #216]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 8001784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001788:	6613      	str	r3, [r2, #96]	; 0x60
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001796:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a30      	ldr	r2, [pc, #192]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 80017ae:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	4825      	ldr	r0, [pc, #148]	; (8001860 <HAL_TIM_Base_MspInit+0x104>)
 80017cc:	f000 fb0e 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80017e2:	2303      	movs	r3, #3
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	481c      	ldr	r0, [pc, #112]	; (8001860 <HAL_TIM_Base_MspInit+0x104>)
 80017ee:	f000 fafd 	bl	8001dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017f2:	e02c      	b.n	800184e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM4)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <HAL_TIM_Base_MspInit+0x108>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d127      	bne.n	800184e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6593      	str	r3, [r2, #88]	; 0x58
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_TIM_Base_MspInit+0x100>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800182e:	2301      	movs	r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800183e:	2302      	movs	r3, #2
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_TIM_Base_MspInit+0x104>)
 800184a:	f000 facf 	bl	8001dec <HAL_GPIO_Init>
}
 800184e:	bf00      	nop
 8001850:	3730      	adds	r7, #48	; 0x30
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40012c00 	.word	0x40012c00
 800185c:	40021000 	.word	0x40021000
 8001860:	48001000 	.word	0x48001000
 8001864:	40000800 	.word	0x40000800

08001868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a23      	ldr	r2, [pc, #140]	; (8001914 <HAL_TIM_MspPostInit+0xac>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d11d      	bne.n	80018c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 8001890:	f043 0310 	orr.w	r3, r3, #16
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80018a2:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4817      	ldr	r0, [pc, #92]	; (800191c <HAL_TIM_MspPostInit+0xb4>)
 80018c0:	f000 fa94 	bl	8001dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018c4:	e021      	b.n	800190a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_TIM_MspPostInit+0xb8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d11c      	bne.n	800190a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018fa:	2302      	movs	r3, #2
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <HAL_TIM_MspPostInit+0xbc>)
 8001906:	f000 fa71 	bl	8001dec <HAL_GPIO_Init>
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40012c00 	.word	0x40012c00
 8001918:	40021000 	.word	0x40021000
 800191c:	48001000 	.word	0x48001000
 8001920:	40000800 	.word	0x40000800
 8001924:	48000400 	.word	0x48000400

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0ae      	sub	sp, #184	; 0xb8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2294      	movs	r2, #148	; 0x94
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f004 fe47 	bl	80065dc <memset>
  if(huart->Instance==USART1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a22      	ldr	r2, [pc, #136]	; (80019dc <HAL_UART_MspInit+0xb4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d13d      	bne.n	80019d4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001958:	2301      	movs	r3, #1
 800195a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800195c:	2300      	movs	r3, #0
 800195e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	4618      	mov	r0, r3
 8001966:	f001 fc89 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001970:	f7ff fe88 	bl	8001684 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 8001976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 800197a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197e:	6613      	str	r3, [r2, #96]	; 0x60
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 8001982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 8001992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_UART_MspInit+0xb8>)
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80019a4:	f000 fd82 	bl	80024ac <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c2:	2307      	movs	r3, #7
 80019c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_UART_MspInit+0xbc>)
 80019d0:	f000 fa0c 	bl	8001dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	37b8      	adds	r7, #184	; 0xb8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	48001800 	.word	0x48001800

080019e8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_UART_MspDeInit+0x30>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10a      	bne.n	8001a10 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_UART_MspDeInit+0x34>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_UART_MspDeInit+0x34>)
 8001a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a04:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_10);
 8001a06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_UART_MspDeInit+0x38>)
 8001a0c:	f000 fb80 	bl	8002110 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	48001800 	.word	0x48001800

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 f892 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff ffea 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	; (8001adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <LoopForever+0xe>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	; (8001ae8 <LoopForever+0x16>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f004 fd8f 	bl	80065ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7ff f86b 	bl	8000ba8 <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001ae0:	080066cc 	.word	0x080066cc
  ldr r2, =_sbss
 8001ae4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001ae8:	20000204 	.word	0x20000204

08001aec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_IRQHandler>

08001aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f943 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 f80e 	bl	8001b20 <HAL_InitTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	e001      	b.n	8001b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b10:	f7ff fdbe 	bl	8001690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_InitTick+0x6c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d023      	beq.n	8001b7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_InitTick+0x70>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_InitTick+0x6c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f941 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d809      	bhi.n	8001b70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b64:	f000 f919 	bl	8001d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_InitTick+0x74>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e004      	b.n	8001b80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e001      	b.n	8001b80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000028 	.word	0x20000028
 8001b90:	20000020 	.word	0x20000020
 8001b94:	20000024 	.word	0x20000024

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000028 	.word	0x20000028
 8001bbc:	20000200 	.word	0x20000200

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000200 	.word	0x20000200

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000028 	.word	0x20000028

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d64:	f7ff ff8e 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff47 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff5c 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff8e 	bl	8001cd8 <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5d 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffb0 	bl	8001d40 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfa:	e166      	b.n	80020ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8158 	beq.w	80020c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d005      	beq.n	8001e2c <HAL_GPIO_Init+0x40>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d130      	bne.n	8001e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e62:	2201      	movs	r2, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 0201 	and.w	r2, r3, #1
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d017      	beq.n	8001eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d123      	bne.n	8001f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	08da      	lsrs	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3208      	adds	r2, #8
 8001ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	220f      	movs	r2, #15
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	08da      	lsrs	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3208      	adds	r2, #8
 8001f18:	6939      	ldr	r1, [r7, #16]
 8001f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0203 	and.w	r2, r3, #3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80b2 	beq.w	80020c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f60:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <HAL_GPIO_Init+0x2fc>)
 8001f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f64:	4a60      	ldr	r2, [pc, #384]	; (80020e8 <HAL_GPIO_Init+0x2fc>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f6c:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <HAL_GPIO_Init+0x2fc>)
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f78:	4a5c      	ldr	r2, [pc, #368]	; (80020ec <HAL_GPIO_Init+0x300>)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fa2:	d02b      	beq.n	8001ffc <HAL_GPIO_Init+0x210>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_GPIO_Init+0x304>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d025      	beq.n	8001ff8 <HAL_GPIO_Init+0x20c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a51      	ldr	r2, [pc, #324]	; (80020f4 <HAL_GPIO_Init+0x308>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d01f      	beq.n	8001ff4 <HAL_GPIO_Init+0x208>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a50      	ldr	r2, [pc, #320]	; (80020f8 <HAL_GPIO_Init+0x30c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d019      	beq.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a4f      	ldr	r2, [pc, #316]	; (80020fc <HAL_GPIO_Init+0x310>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <HAL_GPIO_Init+0x200>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a4e      	ldr	r2, [pc, #312]	; (8002100 <HAL_GPIO_Init+0x314>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00d      	beq.n	8001fe8 <HAL_GPIO_Init+0x1fc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a4d      	ldr	r2, [pc, #308]	; (8002104 <HAL_GPIO_Init+0x318>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <HAL_GPIO_Init+0x1f8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a4c      	ldr	r2, [pc, #304]	; (8002108 <HAL_GPIO_Init+0x31c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_GPIO_Init+0x1f4>
 8001fdc:	2307      	movs	r3, #7
 8001fde:	e00e      	b.n	8001ffe <HAL_GPIO_Init+0x212>
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	e00c      	b.n	8001ffe <HAL_GPIO_Init+0x212>
 8001fe4:	2306      	movs	r3, #6
 8001fe6:	e00a      	b.n	8001ffe <HAL_GPIO_Init+0x212>
 8001fe8:	2305      	movs	r3, #5
 8001fea:	e008      	b.n	8001ffe <HAL_GPIO_Init+0x212>
 8001fec:	2304      	movs	r3, #4
 8001fee:	e006      	b.n	8001ffe <HAL_GPIO_Init+0x212>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e004      	b.n	8001ffe <HAL_GPIO_Init+0x212>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e002      	b.n	8001ffe <HAL_GPIO_Init+0x212>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_GPIO_Init+0x212>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	f002 0203 	and.w	r2, r2, #3
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	4093      	lsls	r3, r2
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800200e:	4937      	ldr	r1, [pc, #220]	; (80020ec <HAL_GPIO_Init+0x300>)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800201c:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_GPIO_Init+0x320>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002040:	4a32      	ldr	r2, [pc, #200]	; (800210c <HAL_GPIO_Init+0x320>)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_GPIO_Init+0x320>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800206a:	4a28      	ldr	r2, [pc, #160]	; (800210c <HAL_GPIO_Init+0x320>)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_GPIO_Init+0x320>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_GPIO_Init+0x320>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_GPIO_Init+0x320>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020be:	4a13      	ldr	r2, [pc, #76]	; (800210c <HAL_GPIO_Init+0x320>)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f47f ae91 	bne.w	8001dfc <HAL_GPIO_Init+0x10>
  }
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010000 	.word	0x40010000
 80020f0:	48000400 	.word	0x48000400
 80020f4:	48000800 	.word	0x48000800
 80020f8:	48000c00 	.word	0x48000c00
 80020fc:	48001000 	.word	0x48001000
 8002100:	48001400 	.word	0x48001400
 8002104:	48001800 	.word	0x48001800
 8002108:	48001c00 	.word	0x48001c00
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800211e:	e0c9      	b.n	80022b4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002120:	2201      	movs	r2, #1
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80bc 	beq.w	80022ae <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002136:	4a66      	ldr	r2, [pc, #408]	; (80022d0 <HAL_GPIO_DeInit+0x1c0>)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002142:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800215e:	d02b      	beq.n	80021b8 <HAL_GPIO_DeInit+0xa8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a5c      	ldr	r2, [pc, #368]	; (80022d4 <HAL_GPIO_DeInit+0x1c4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d025      	beq.n	80021b4 <HAL_GPIO_DeInit+0xa4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a5b      	ldr	r2, [pc, #364]	; (80022d8 <HAL_GPIO_DeInit+0x1c8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d01f      	beq.n	80021b0 <HAL_GPIO_DeInit+0xa0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a5a      	ldr	r2, [pc, #360]	; (80022dc <HAL_GPIO_DeInit+0x1cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d019      	beq.n	80021ac <HAL_GPIO_DeInit+0x9c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a59      	ldr	r2, [pc, #356]	; (80022e0 <HAL_GPIO_DeInit+0x1d0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <HAL_GPIO_DeInit+0x98>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_GPIO_DeInit+0x1d4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00d      	beq.n	80021a4 <HAL_GPIO_DeInit+0x94>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a57      	ldr	r2, [pc, #348]	; (80022e8 <HAL_GPIO_DeInit+0x1d8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_DeInit+0x90>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a56      	ldr	r2, [pc, #344]	; (80022ec <HAL_GPIO_DeInit+0x1dc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_GPIO_DeInit+0x8c>
 8002198:	2307      	movs	r3, #7
 800219a:	e00e      	b.n	80021ba <HAL_GPIO_DeInit+0xaa>
 800219c:	2308      	movs	r3, #8
 800219e:	e00c      	b.n	80021ba <HAL_GPIO_DeInit+0xaa>
 80021a0:	2306      	movs	r3, #6
 80021a2:	e00a      	b.n	80021ba <HAL_GPIO_DeInit+0xaa>
 80021a4:	2305      	movs	r3, #5
 80021a6:	e008      	b.n	80021ba <HAL_GPIO_DeInit+0xaa>
 80021a8:	2304      	movs	r3, #4
 80021aa:	e006      	b.n	80021ba <HAL_GPIO_DeInit+0xaa>
 80021ac:	2303      	movs	r3, #3
 80021ae:	e004      	b.n	80021ba <HAL_GPIO_DeInit+0xaa>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_DeInit+0xaa>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_GPIO_DeInit+0xaa>
 80021b8:	2300      	movs	r3, #0
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	f002 0203 	and.w	r2, r2, #3
 80021c0:	0092      	lsls	r2, r2, #2
 80021c2:	4093      	lsls	r3, r2
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d132      	bne.n	8002230 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_GPIO_DeInit+0x1e0>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	4947      	ldr	r1, [pc, #284]	; (80022f0 <HAL_GPIO_DeInit+0x1e0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80021d8:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <HAL_GPIO_DeInit+0x1e0>)
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	4943      	ldr	r1, [pc, #268]	; (80022f0 <HAL_GPIO_DeInit+0x1e0>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80021e6:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <HAL_GPIO_DeInit+0x1e0>)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4940      	ldr	r1, [pc, #256]	; (80022f0 <HAL_GPIO_DeInit+0x1e0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80021f4:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <HAL_GPIO_DeInit+0x1e0>)
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	493c      	ldr	r1, [pc, #240]	; (80022f0 <HAL_GPIO_DeInit+0x1e0>)
 80021fe:	4013      	ands	r3, r2
 8002200:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	220f      	movs	r2, #15
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002212:	4a2f      	ldr	r2, [pc, #188]	; (80022d0 <HAL_GPIO_DeInit+0x1c0>)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	43da      	mvns	r2, r3
 8002222:	482b      	ldr	r0, [pc, #172]	; (80022d0 <HAL_GPIO_DeInit+0x1c0>)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	400a      	ands	r2, r1
 800222a:	3302      	adds	r3, #2
 800222c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2103      	movs	r1, #3
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	08d2      	lsrs	r2, r2, #3
 8002264:	4019      	ands	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2103      	movs	r1, #3
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	2101      	movs	r1, #1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2103      	movs	r1, #3
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f af2f 	bne.w	8002120 <HAL_GPIO_DeInit+0x10>
  }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40010000 	.word	0x40010000
 80022d4:	48000400 	.word	0x48000400
 80022d8:	48000800 	.word	0x48000800
 80022dc:	48000c00 	.word	0x48000c00
 80022e0:	48001000 	.word	0x48001000
 80022e4:	48001400 	.word	0x48001400
 80022e8:	48001800 	.word	0x48001800
 80022ec:	48001c00 	.word	0x48001c00
 80022f0:	40010400 	.word	0x40010400

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002310:	e002      	b.n	8002318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_PWREx_GetVoltageRange+0x3c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002334:	d102      	bne.n	800233c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800233a:	e00b      	b.n	8002354 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_PWREx_GetVoltageRange+0x3c>)
 800233e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234a:	d102      	bne.n	8002352 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800234c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002350:	e000      	b.n	8002354 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002352:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40007000 	.word	0x40007000

08002364 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d141      	bne.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002372:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d131      	bne.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002380:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002386:	4a46      	ldr	r2, [pc, #280]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800238c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002390:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002398:	4a41      	ldr	r2, [pc, #260]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023a0:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2232      	movs	r2, #50	; 0x32
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	4a3f      	ldr	r2, [pc, #252]	; (80024a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	0c9b      	lsrs	r3, r3, #18
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b6:	e002      	b.n	80023be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d102      	bne.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f2      	bne.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d2:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023de:	d158      	bne.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e057      	b.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ea:	4a2d      	ldr	r2, [pc, #180]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023f4:	e04d      	b.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fc:	d141      	bne.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023fe:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240a:	d131      	bne.n	8002470 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800241c:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002424:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2232      	movs	r2, #50	; 0x32
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	0c9b      	lsrs	r3, r3, #18
 800243e:	3301      	adds	r3, #1
 8002440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002442:	e002      	b.n	800244a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3b01      	subs	r3, #1
 8002448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002456:	d102      	bne.n	800245e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f2      	bne.n	8002444 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246a:	d112      	bne.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e011      	b.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002480:	e007      	b.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002490:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40007000 	.word	0x40007000
 80024a4:	20000020 	.word	0x20000020
 80024a8:	431bde83 	.word	0x431bde83

080024ac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80024b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ba:	6053      	str	r3, [r2, #4]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40007000 	.word	0x40007000

080024cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f000 bc08 	b.w	8002cf0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e0:	4b96      	ldr	r3, [pc, #600]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ea:	4b94      	ldr	r3, [pc, #592]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80e4 	beq.w	80026ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_RCC_OscConfig+0x4c>
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	f040 808b 	bne.w	8002626 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b01      	cmp	r3, #1
 8002514:	f040 8087 	bne.w	8002626 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002518:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_OscConfig+0x64>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e3df      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1a      	ldr	r2, [r3, #32]
 8002534:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <HAL_RCC_OscConfig+0x7e>
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002548:	e005      	b.n	8002556 <HAL_RCC_OscConfig+0x8a>
 800254a:	4b7c      	ldr	r3, [pc, #496]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800254c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002556:	4293      	cmp	r3, r2
 8002558:	d223      	bcs.n	80025a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fdcc 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e3c0      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256e:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a72      	ldr	r2, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	496d      	ldr	r1, [pc, #436]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258c:	4b6b      	ldr	r3, [pc, #428]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	4968      	ldr	r1, [pc, #416]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e025      	b.n	80025ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a2:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4960      	ldr	r1, [pc, #384]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c0:	4b5e      	ldr	r3, [pc, #376]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	495b      	ldr	r1, [pc, #364]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fd8c 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e380      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ee:	f000 fcc1 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	4950      	ldr	r1, [pc, #320]	; (8002740 <HAL_RCC_OscConfig+0x274>)
 8002600:	5ccb      	ldrb	r3, [r1, r3]
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	4a4e      	ldr	r2, [pc, #312]	; (8002744 <HAL_RCC_OscConfig+0x278>)
 800260c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800260e:	4b4e      	ldr	r3, [pc, #312]	; (8002748 <HAL_RCC_OscConfig+0x27c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fa84 	bl	8001b20 <HAL_InitTick>
 8002618:	4603      	mov	r3, r0
 800261a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d052      	beq.n	80026c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	e364      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d032      	beq.n	8002694 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800262e:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a42      	ldr	r2, [pc, #264]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800263a:	f7ff fac1 	bl	8001bc0 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002642:	f7ff fabd 	bl	8001bc0 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e34d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a35      	ldr	r2, [pc, #212]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002666:	f043 0308 	orr.w	r3, r3, #8
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4930      	ldr	r1, [pc, #192]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	492b      	ldr	r1, [pc, #172]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
 8002692:	e01a      	b.n	80026ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a28      	ldr	r2, [pc, #160]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026a0:	f7ff fa8e 	bl	8001bc0 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a8:	f7ff fa8a 	bl	8001bc0 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e31a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x1dc>
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d073      	beq.n	80027be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_OscConfig+0x21c>
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	d10e      	bne.n	8002700 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d10b      	bne.n	8002700 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d063      	beq.n	80027bc <HAL_RCC_OscConfig+0x2f0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d15f      	bne.n	80027bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e2f7      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002708:	d106      	bne.n	8002718 <HAL_RCC_OscConfig+0x24c>
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e025      	b.n	8002764 <HAL_RCC_OscConfig+0x298>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002720:	d114      	bne.n	800274c <HAL_RCC_OscConfig+0x280>
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a02      	ldr	r2, [pc, #8]	; (800273c <HAL_RCC_OscConfig+0x270>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e013      	b.n	8002764 <HAL_RCC_OscConfig+0x298>
 800273c:	40021000 	.word	0x40021000
 8002740:	0800664c 	.word	0x0800664c
 8002744:	20000020 	.word	0x20000020
 8002748:	20000024 	.word	0x20000024
 800274c:	4ba0      	ldr	r3, [pc, #640]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a9f      	ldr	r2, [pc, #636]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b9d      	ldr	r3, [pc, #628]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a9c      	ldr	r2, [pc, #624]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff fa28 	bl	8001bc0 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff fa24 	bl	8001bc0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e2b4      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x2a8>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff fa14 	bl	8001bc0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff fa10 	bl	8001bc0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e2a0      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ae:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x2d0>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d060      	beq.n	800288c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_OscConfig+0x310>
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d119      	bne.n	800280a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d116      	bne.n	800280a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027dc:	4b7c      	ldr	r3, [pc, #496]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_OscConfig+0x328>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e27d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	4973      	ldr	r1, [pc, #460]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002808:	e040      	b.n	800288c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d023      	beq.n	800285a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002812:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7ff f9cf 	bl	8001bc0 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002826:	f7ff f9cb 	bl	8001bc0 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e25b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002838:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	495f      	ldr	r1, [pc, #380]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
 8002858:	e018      	b.n	800288c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a5c      	ldr	r2, [pc, #368]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7ff f9ab 	bl	8001bc0 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286e:	f7ff f9a7 	bl	8001bc0 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e237      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d03c      	beq.n	8002912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01c      	beq.n	80028da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a6:	4a4a      	ldr	r2, [pc, #296]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff f986 	bl	8001bc0 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7ff f982 	bl	8001bc0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e212      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ca:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ef      	beq.n	80028b8 <HAL_RCC_OscConfig+0x3ec>
 80028d8:	e01b      	b.n	8002912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7ff f969 	bl	8001bc0 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f2:	f7ff f965 	bl	8001bc0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1f5      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002904:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ef      	bne.n	80028f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80a6 	beq.w	8002a6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002920:	2300      	movs	r3, #0
 8002922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002924:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10d      	bne.n	800294c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	4a26      	ldr	r2, [pc, #152]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293a:	6593      	str	r3, [r2, #88]	; 0x58
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002948:	2301      	movs	r3, #1
 800294a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <HAL_RCC_OscConfig+0x508>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d118      	bne.n	800298a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_RCC_OscConfig+0x508>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_RCC_OscConfig+0x508>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002964:	f7ff f92c 	bl	8001bc0 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296c:	f7ff f928 	bl	8001bc0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e1b8      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <HAL_RCC_OscConfig+0x508>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4d8>
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029a2:	e029      	b.n	80029f8 <HAL_RCC_OscConfig+0x52c>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d115      	bne.n	80029d8 <HAL_RCC_OscConfig+0x50c>
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <HAL_RCC_OscConfig+0x504>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029cc:	e014      	b.n	80029f8 <HAL_RCC_OscConfig+0x52c>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	4b9d      	ldr	r3, [pc, #628]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	4a9c      	ldr	r2, [pc, #624]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e8:	4b99      	ldr	r3, [pc, #612]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	4a98      	ldr	r2, [pc, #608]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 80029f0:	f023 0304 	bic.w	r3, r3, #4
 80029f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d016      	beq.n	8002a2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff f8de 	bl	8001bc0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7ff f8da 	bl	8001bc0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e168      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1e:	4b8c      	ldr	r3, [pc, #560]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ed      	beq.n	8002a08 <HAL_RCC_OscConfig+0x53c>
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f8c7 	bl	8001bc0 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7ff f8c3 	bl	8001bc0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e151      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4c:	4b80      	ldr	r3, [pc, #512]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ed      	bne.n	8002a36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a5a:	7ffb      	ldrb	r3, [r7, #31]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a60:	4b7b      	ldr	r3, [pc, #492]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	4a7a      	ldr	r2, [pc, #488]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d03c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01c      	beq.n	8002aba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a80:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a86:	4a72      	ldr	r2, [pc, #456]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7ff f896 	bl	8001bc0 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a98:	f7ff f892 	bl	8001bc0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e122      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aaa:	4b69      	ldr	r3, [pc, #420]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ef      	beq.n	8002a98 <HAL_RCC_OscConfig+0x5cc>
 8002ab8:	e01b      	b.n	8002af2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac0:	4a63      	ldr	r2, [pc, #396]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aca:	f7ff f879 	bl	8001bc0 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ad2:	f7ff f875 	bl	8001bc0 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e105      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ae4:	4b5a      	ldr	r3, [pc, #360]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ef      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80f9 	beq.w	8002cee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	f040 80cf 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b06:	4b52      	ldr	r3, [pc, #328]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0203 	and.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d12c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	3b01      	subs	r3, #1
 8002b26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d123      	bne.n	8002b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d11b      	bne.n	8002b74 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d113      	bne.n	8002b74 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d109      	bne.n	8002b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d071      	beq.n	8002c58 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d068      	beq.n	8002c4c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b7a:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b86:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0ac      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2d      	ldr	r2, [pc, #180]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ba2:	f7ff f80d 	bl	8001bc0 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7ff f809 	bl	8001bc0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e099      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCC_OscConfig+0x788>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002be2:	0212      	lsls	r2, r2, #8
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bea:	0852      	lsrs	r2, r2, #1
 8002bec:	3a01      	subs	r2, #1
 8002bee:	0552      	lsls	r2, r2, #21
 8002bf0:	4311      	orrs	r1, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bf6:	0852      	lsrs	r2, r2, #1
 8002bf8:	3a01      	subs	r2, #1
 8002bfa:	0652      	lsls	r2, r2, #25
 8002bfc:	4311      	orrs	r1, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c02:	06d2      	lsls	r2, r2, #27
 8002c04:	430a      	orrs	r2, r1
 8002c06:	4912      	ldr	r1, [pc, #72]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c24:	f7fe ffcc 	bl	8001bc0 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe ffc8 	bl	8001bc0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e058      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c4a:	e050      	b.n	8002cee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e04f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
 8002c50:	40021000 	.word	0x40021000
 8002c54:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d144      	bne.n	8002cee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c7c:	f7fe ffa0 	bl	8001bc0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe ff9c 	bl	8001bc0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e02c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x7b8>
 8002ca2:	e024      	b.n	8002cee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d01f      	beq.n	8002cea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe ff83 	bl	8001bc0 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe ff7f 	bl	8001bc0 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e00f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4905      	ldr	r1, [pc, #20]	; (8002cf8 <HAL_RCC_OscConfig+0x82c>)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x830>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
 8002ce8:	e001      	b.n	8002cee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	feeefffc 	.word	0xfeeefffc

08002d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e11d      	b.n	8002f54 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b90      	ldr	r3, [pc, #576]	; (8002f5c <HAL_RCC_ClockConfig+0x25c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b8d      	ldr	r3, [pc, #564]	; (8002f5c <HAL_RCC_ClockConfig+0x25c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 020f 	bic.w	r2, r3, #15
 8002d2e:	498b      	ldr	r1, [pc, #556]	; (8002f5c <HAL_RCC_ClockConfig+0x25c>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b89      	ldr	r3, [pc, #548]	; (8002f5c <HAL_RCC_ClockConfig+0x25c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e105      	b.n	8002f54 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	4b81      	ldr	r3, [pc, #516]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d908      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b7e      	ldr	r3, [pc, #504]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	497b      	ldr	r1, [pc, #492]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d079      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d11e      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	4b75      	ldr	r3, [pc, #468]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0dc      	b.n	8002f54 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d9a:	f000 fa09 	bl	80031b0 <RCC_GetSysClockFreqFromPLLSource>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4a70      	ldr	r2, [pc, #448]	; (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d946      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002da6:	4b6e      	ldr	r3, [pc, #440]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d140      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002db2:	4b6b      	ldr	r3, [pc, #428]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dba:	4a69      	ldr	r2, [pc, #420]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e035      	b.n	8002e34 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd0:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d115      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0b9      	b.n	8002f54 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002de8:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0ad      	b.n	8002f54 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df8:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0a5      	b.n	8002f54 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e08:	f000 f8b4 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4a55      	ldr	r2, [pc, #340]	; (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d90f      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e14:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e20:	4b4f      	ldr	r3, [pc, #316]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e28:	4a4d      	ldr	r2, [pc, #308]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e34:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 0203 	bic.w	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4947      	ldr	r1, [pc, #284]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e46:	f7fe febb 	bl	8001bc0 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4e:	f7fe feb7 	bl	8001bc0 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e077      	b.n	8002f54 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e64:	4b3e      	ldr	r3, [pc, #248]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 020c 	and.w	r2, r3, #12
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d1eb      	bne.n	8002e4e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b80      	cmp	r3, #128	; 0x80
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e7c:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a37      	ldr	r2, [pc, #220]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e86:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d010      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d208      	bcs.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	492b      	ldr	r1, [pc, #172]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_RCC_ClockConfig+0x25c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d210      	bcs.n	8002ee6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_RCC_ClockConfig+0x25c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 020f 	bic.w	r2, r3, #15
 8002ecc:	4923      	ldr	r1, [pc, #140]	; (8002f5c <HAL_RCC_ClockConfig+0x25c>)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed4:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <HAL_RCC_ClockConfig+0x25c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e036      	b.n	8002f54 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	4918      	ldr	r1, [pc, #96]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4910      	ldr	r1, [pc, #64]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f24:	f000 f826 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	490c      	ldr	r1, [pc, #48]	; (8002f68 <HAL_RCC_ClockConfig+0x268>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x26c>)
 8002f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_ClockConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fde9 	bl	8001b20 <HAL_InitTick>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	40021000 	.word	0x40021000
 8002f64:	04c4b400 	.word	0x04c4b400
 8002f68:	0800664c 	.word	0x0800664c
 8002f6c:	20000020 	.word	0x20000020
 8002f70:	20000024 	.word	0x20000024

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f82:	4b3e      	ldr	r3, [pc, #248]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d121      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d11e      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa8:	4b34      	ldr	r3, [pc, #208]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fb4:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e005      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fd0:	4a2b      	ldr	r2, [pc, #172]	; (8003080 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d102      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	e004      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ffa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d134      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d003      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0xa6>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d003      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0xac>
 8003018:	e005      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_GetSysClockFreq+0x110>)
 800301c:	617b      	str	r3, [r7, #20]
      break;
 800301e:	e005      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCC_GetSysClockFreq+0x114>)
 8003022:	617b      	str	r3, [r7, #20]
      break;
 8003024:	e002      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	617b      	str	r3, [r7, #20]
      break;
 800302a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3301      	adds	r3, #1
 8003038:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	fb03 f202 	mul.w	r2, r3, r2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	0e5b      	lsrs	r3, r3, #25
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	3301      	adds	r3, #1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800306c:	69bb      	ldr	r3, [r7, #24]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	08006664 	.word	0x08006664
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200

0800308c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000020 	.word	0x20000020

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030a8:	f7ff fff0 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4904      	ldr	r1, [pc, #16]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	0800665c 	.word	0x0800665c

080030d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030d4:	f7ff ffda 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0adb      	lsrs	r3, r3, #11
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	0800665c 	.word	0x0800665c

080030fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003114:	f7ff f906 	bl	8002324 <HAL_PWREx_GetVoltageRange>
 8003118:	6178      	str	r0, [r7, #20]
 800311a:	e014      	b.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800311c:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
 8003128:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff f8f6 	bl	8002324 <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314c:	d10b      	bne.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d913      	bls.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2ba0      	cmp	r3, #160	; 0xa0
 8003158:	d902      	bls.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800315a:	2302      	movs	r3, #2
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e00d      	b.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003160:	2301      	movs	r3, #1
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e00a      	b.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b7f      	cmp	r3, #127	; 0x7f
 800316a:	d902      	bls.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800316c:	2302      	movs	r3, #2
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e004      	b.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b70      	cmp	r3, #112	; 0x70
 8003176:	d101      	bne.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003178:	2301      	movs	r3, #1
 800317a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 020f 	bic.w	r2, r3, #15
 8003184:	4909      	ldr	r1, [pc, #36]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	429a      	cmp	r2, r3
 8003198:	d001      	beq.n	800319e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40022000 	.word	0x40022000

080031b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d00b      	beq.n	80031de <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d825      	bhi.n	8003218 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d008      	beq.n	80031e4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d11f      	bne.n	8003218 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031da:	613b      	str	r3, [r7, #16]
    break;
 80031dc:	e01f      	b.n	800321e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80031de:	4b25      	ldr	r3, [pc, #148]	; (8003274 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80031e0:	613b      	str	r3, [r7, #16]
    break;
 80031e2:	e01c      	b.n	800321e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d107      	bne.n	8003200 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031f0:	4b1e      	ldr	r3, [pc, #120]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e005      	b.n	800320c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800320c:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003214:	613b      	str	r3, [r7, #16]
    break;
 8003216:	e002      	b.n	800321e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
    break;
 800321c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	3301      	adds	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	fb03 f202 	mul.w	r2, r3, r2
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0e5b      	lsrs	r3, r3, #25
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	3301      	adds	r3, #1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800325e:	683b      	ldr	r3, [r7, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000
 8003270:	00f42400 	.word	0x00f42400
 8003274:	007a1200 	.word	0x007a1200
 8003278:	08006664 	.word	0x08006664

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003284:	2300      	movs	r3, #0
 8003286:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003288:	2300      	movs	r3, #0
 800328a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003294:	2b00      	cmp	r3, #0
 8003296:	d040      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329c:	2b80      	cmp	r3, #128	; 0x80
 800329e:	d02a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032a0:	2b80      	cmp	r3, #128	; 0x80
 80032a2:	d825      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032a4:	2b60      	cmp	r3, #96	; 0x60
 80032a6:	d026      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032a8:	2b60      	cmp	r3, #96	; 0x60
 80032aa:	d821      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d006      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x42>
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	d81d      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d010      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x62>
 80032bc:	e018      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032be:	4b89      	ldr	r3, [pc, #548]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	4a88      	ldr	r2, [pc, #544]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ca:	e015      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fb02 	bl	80038dc <RCCEx_PLLSAI1_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032dc:	e00c      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3320      	adds	r3, #32
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fbed 	bl	8003ac4 <RCCEx_PLLSAI2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	74fb      	strb	r3, [r7, #19]
      break;
 80032f4:	e000      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80032f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032fe:	4b79      	ldr	r3, [pc, #484]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003304:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330c:	4975      	ldr	r1, [pc, #468]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003314:	e001      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d047      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d030      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003334:	d82a      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800333a:	d02a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800333c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003340:	d824      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003346:	d008      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334c:	d81e      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003356:	d010      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003358:	e018      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800335a:	4b62      	ldr	r3, [pc, #392]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4a61      	ldr	r2, [pc, #388]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003366:	e015      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fab4 	bl	80038dc <RCCEx_PLLSAI1_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003378:	e00c      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3320      	adds	r3, #32
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fb9f 	bl	8003ac4 <RCCEx_PLLSAI2_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800338a:	e003      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	74fb      	strb	r3, [r7, #19]
      break;
 8003390:	e000      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10b      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800339a:	4b52      	ldr	r3, [pc, #328]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800339c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	494e      	ldr	r1, [pc, #312]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033b0:	e001      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 809f 	beq.w	8003502 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c4:	2300      	movs	r3, #0
 80033c6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033c8:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033de:	4b41      	ldr	r3, [pc, #260]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	4a40      	ldr	r2, [pc, #256]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6593      	str	r3, [r2, #88]	; 0x58
 80033ea:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f6:	2301      	movs	r3, #1
 80033f8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3a      	ldr	r2, [pc, #232]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003406:	f7fe fbdb 	bl	8001bc0 <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800340c:	e009      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340e:	f7fe fbd7 	bl	8001bc0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d902      	bls.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	74fb      	strb	r3, [r7, #19]
        break;
 8003420:	e005      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003422:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ef      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d15b      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003434:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01f      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	429a      	cmp	r2, r3
 8003450:	d019      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003452:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800345e:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800347e:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d016      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe fb96 	bl	8001bc0 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003496:	e00b      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fe fb92 	bl	8001bc0 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d902      	bls.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	74fb      	strb	r3, [r7, #19]
            break;
 80034ae:	e006      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ec      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10c      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	4903      	ldr	r1, [pc, #12]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034dc:	e008      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	74bb      	strb	r3, [r7, #18]
 80034e2:	e005      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f0:	7c7b      	ldrb	r3, [r7, #17]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f6:	4ba0      	ldr	r3, [pc, #640]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	4a9f      	ldr	r2, [pc, #636]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800350e:	4b9a      	ldr	r3, [pc, #616]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f023 0203 	bic.w	r2, r3, #3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351c:	4996      	ldr	r1, [pc, #600]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003530:	4b91      	ldr	r3, [pc, #580]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f023 020c 	bic.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	498e      	ldr	r1, [pc, #568]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003552:	4b89      	ldr	r3, [pc, #548]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	4985      	ldr	r1, [pc, #532]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003574:	4b80      	ldr	r3, [pc, #512]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003582:	497d      	ldr	r1, [pc, #500]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003596:	4b78      	ldr	r3, [pc, #480]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a4:	4974      	ldr	r1, [pc, #464]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035b8:	4b6f      	ldr	r3, [pc, #444]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c6:	496c      	ldr	r1, [pc, #432]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035da:	4b67      	ldr	r3, [pc, #412]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e8:	4963      	ldr	r1, [pc, #396]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035fc:	4b5e      	ldr	r3, [pc, #376]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360a:	495b      	ldr	r1, [pc, #364]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800361e:	4b56      	ldr	r3, [pc, #344]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	4952      	ldr	r1, [pc, #328]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003640:	4b4d      	ldr	r3, [pc, #308]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	494a      	ldr	r1, [pc, #296]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003662:	4b45      	ldr	r3, [pc, #276]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003670:	4941      	ldr	r1, [pc, #260]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003684:	4b3c      	ldr	r3, [pc, #240]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003692:	4939      	ldr	r1, [pc, #228]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d028      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b4:	4930      	ldr	r1, [pc, #192]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c4:	d106      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c6:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4a2b      	ldr	r2, [pc, #172]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d0:	60d3      	str	r3, [r2, #12]
 80036d2:	e011      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2101      	movs	r1, #1
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f8f9 	bl	80038dc <RCCEx_PLLSAI1_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d04d      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800370c:	d108      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003714:	4a18      	ldr	r2, [pc, #96]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800371a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800371e:	e012      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800372c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	490e      	ldr	r1, [pc, #56]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374e:	d106      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375a:	60d3      	str	r3, [r2, #12]
 800375c:	e020      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003766:	d109      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a02      	ldr	r2, [pc, #8]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003772:	60d3      	str	r3, [r2, #12]
 8003774:	e014      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	2101      	movs	r1, #1
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f8a5 	bl	80038dc <RCCEx_PLLSAI1_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d028      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037ac:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ba:	4947      	ldr	r1, [pc, #284]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ca:	d106      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037cc:	4b42      	ldr	r3, [pc, #264]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a41      	ldr	r2, [pc, #260]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d6:	60d3      	str	r3, [r2, #12]
 80037d8:	e011      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e2:	d10c      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	2101      	movs	r1, #1
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f876 	bl	80038dc <RCCEx_PLLSAI1_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f4:	7cfb      	ldrb	r3, [r7, #19]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01e      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800380a:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381a:	492f      	ldr	r1, [pc, #188]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800382c:	d10c      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	2102      	movs	r1, #2
 8003834:	4618      	mov	r0, r3
 8003836:	f000 f851 	bl	80038dc <RCCEx_PLLSAI1_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003854:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800385a:	f023 0204 	bic.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003864:	491c      	ldr	r1, [pc, #112]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00b      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003878:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800387e:	f023 0218 	bic.w	r2, r3, #24
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	4913      	ldr	r1, [pc, #76]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800389c:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ac:	490a      	ldr	r1, [pc, #40]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038be:	d105      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000

080038dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ea:	4b72      	ldr	r3, [pc, #456]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00e      	beq.n	8003914 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038f6:	4b6f      	ldr	r3, [pc, #444]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0203 	and.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d103      	bne.n	800390e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
       ||
 800390a:	2b00      	cmp	r3, #0
 800390c:	d142      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	e03f      	b.n	8003994 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d018      	beq.n	800394e <RCCEx_PLLSAI1_Config+0x72>
 800391c:	2b03      	cmp	r3, #3
 800391e:	d825      	bhi.n	800396c <RCCEx_PLLSAI1_Config+0x90>
 8003920:	2b01      	cmp	r3, #1
 8003922:	d002      	beq.n	800392a <RCCEx_PLLSAI1_Config+0x4e>
 8003924:	2b02      	cmp	r3, #2
 8003926:	d009      	beq.n	800393c <RCCEx_PLLSAI1_Config+0x60>
 8003928:	e020      	b.n	800396c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800392a:	4b62      	ldr	r3, [pc, #392]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11d      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800393a:	e01a      	b.n	8003972 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800393c:	4b5d      	ldr	r3, [pc, #372]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d116      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800394c:	e013      	b.n	8003976 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800394e:	4b59      	ldr	r3, [pc, #356]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800395a:	4b56      	ldr	r3, [pc, #344]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800396a:	e006      	b.n	800397a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      break;
 8003970:	e004      	b.n	800397c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003972:	bf00      	nop
 8003974:	e002      	b.n	800397c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800397a:	bf00      	nop
    }

    if(status == HAL_OK)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d108      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003982:	4b4c      	ldr	r3, [pc, #304]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4949      	ldr	r1, [pc, #292]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 8086 	bne.w	8003aa8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800399c:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a44      	ldr	r2, [pc, #272]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fe f90a 	bl	8001bc0 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ae:	e009      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b0:	f7fe f906 	bl	8001bc0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d902      	bls.n	80039c4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	73fb      	strb	r3, [r7, #15]
        break;
 80039c2:	e005      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039c4:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ef      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d168      	bne.n	8003aa8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d113      	bne.n	8003a04 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6892      	ldr	r2, [r2, #8]
 80039e8:	0211      	lsls	r1, r2, #8
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68d2      	ldr	r2, [r2, #12]
 80039ee:	06d2      	lsls	r2, r2, #27
 80039f0:	4311      	orrs	r1, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6852      	ldr	r2, [r2, #4]
 80039f6:	3a01      	subs	r2, #1
 80039f8:	0112      	lsls	r2, r2, #4
 80039fa:	430a      	orrs	r2, r1
 80039fc:	492d      	ldr	r1, [pc, #180]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	610b      	str	r3, [r1, #16]
 8003a02:	e02d      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d115      	bne.n	8003a36 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6892      	ldr	r2, [r2, #8]
 8003a16:	0211      	lsls	r1, r2, #8
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6912      	ldr	r2, [r2, #16]
 8003a1c:	0852      	lsrs	r2, r2, #1
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	0552      	lsls	r2, r2, #21
 8003a22:	4311      	orrs	r1, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6852      	ldr	r2, [r2, #4]
 8003a28:	3a01      	subs	r2, #1
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	4921      	ldr	r1, [pc, #132]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	610b      	str	r3, [r1, #16]
 8003a34:	e014      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a36:	4b1f      	ldr	r3, [pc, #124]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6892      	ldr	r2, [r2, #8]
 8003a42:	0211      	lsls	r1, r2, #8
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6952      	ldr	r2, [r2, #20]
 8003a48:	0852      	lsrs	r2, r2, #1
 8003a4a:	3a01      	subs	r2, #1
 8003a4c:	0652      	lsls	r2, r2, #25
 8003a4e:	4311      	orrs	r1, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6852      	ldr	r2, [r2, #4]
 8003a54:	3a01      	subs	r2, #1
 8003a56:	0112      	lsls	r2, r2, #4
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	4916      	ldr	r1, [pc, #88]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fe f8a8 	bl	8001bc0 <HAL_GetTick>
 8003a70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a72:	e009      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a74:	f7fe f8a4 	bl	8001bc0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d902      	bls.n	8003a88 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	73fb      	strb	r3, [r7, #15]
          break;
 8003a86:	e005      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ef      	beq.n	8003a74 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	4904      	ldr	r1, [pc, #16]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	07ff800f 	.word	0x07ff800f
 8003abc:	ff9f800f 	.word	0xff9f800f
 8003ac0:	f9ff800f 	.word	0xf9ff800f

08003ac4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ad2:	4b72      	ldr	r3, [pc, #456]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00e      	beq.n	8003afc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ade:	4b6f      	ldr	r3, [pc, #444]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0203 	and.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d103      	bne.n	8003af6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
       ||
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d142      	bne.n	8003b7c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
 8003afa:	e03f      	b.n	8003b7c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d018      	beq.n	8003b36 <RCCEx_PLLSAI2_Config+0x72>
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d825      	bhi.n	8003b54 <RCCEx_PLLSAI2_Config+0x90>
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d002      	beq.n	8003b12 <RCCEx_PLLSAI2_Config+0x4e>
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d009      	beq.n	8003b24 <RCCEx_PLLSAI2_Config+0x60>
 8003b10:	e020      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b12:	4b62      	ldr	r3, [pc, #392]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d11d      	bne.n	8003b5a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b22:	e01a      	b.n	8003b5a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b24:	4b5d      	ldr	r3, [pc, #372]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d116      	bne.n	8003b5e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b34:	e013      	b.n	8003b5e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b36:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b42:	4b56      	ldr	r3, [pc, #344]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b52:	e006      	b.n	8003b62 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
      break;
 8003b58:	e004      	b.n	8003b64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b5a:	bf00      	nop
 8003b5c:	e002      	b.n	8003b64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b62:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d108      	bne.n	8003b7c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b6a:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4949      	ldr	r1, [pc, #292]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f040 8086 	bne.w	8003c90 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b84:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a44      	ldr	r2, [pc, #272]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fe f816 	bl	8001bc0 <HAL_GetTick>
 8003b94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b96:	e009      	b.n	8003bac <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b98:	f7fe f812 	bl	8001bc0 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d902      	bls.n	8003bac <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8003baa:	e005      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bac:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ef      	bne.n	8003b98 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d168      	bne.n	8003c90 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d113      	bne.n	8003bec <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	4b35      	ldr	r3, [pc, #212]	; (8003ca0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6892      	ldr	r2, [r2, #8]
 8003bd0:	0211      	lsls	r1, r2, #8
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68d2      	ldr	r2, [r2, #12]
 8003bd6:	06d2      	lsls	r2, r2, #27
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6852      	ldr	r2, [r2, #4]
 8003bde:	3a01      	subs	r2, #1
 8003be0:	0112      	lsls	r2, r2, #4
 8003be2:	430a      	orrs	r2, r1
 8003be4:	492d      	ldr	r1, [pc, #180]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	614b      	str	r3, [r1, #20]
 8003bea:	e02d      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d115      	bne.n	8003c1e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6892      	ldr	r2, [r2, #8]
 8003bfe:	0211      	lsls	r1, r2, #8
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6912      	ldr	r2, [r2, #16]
 8003c04:	0852      	lsrs	r2, r2, #1
 8003c06:	3a01      	subs	r2, #1
 8003c08:	0552      	lsls	r2, r2, #21
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6852      	ldr	r2, [r2, #4]
 8003c10:	3a01      	subs	r2, #1
 8003c12:	0112      	lsls	r2, r2, #4
 8003c14:	430a      	orrs	r2, r1
 8003c16:	4921      	ldr	r1, [pc, #132]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	614b      	str	r3, [r1, #20]
 8003c1c:	e014      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c1e:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	4b21      	ldr	r3, [pc, #132]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6892      	ldr	r2, [r2, #8]
 8003c2a:	0211      	lsls	r1, r2, #8
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6952      	ldr	r2, [r2, #20]
 8003c30:	0852      	lsrs	r2, r2, #1
 8003c32:	3a01      	subs	r2, #1
 8003c34:	0652      	lsls	r2, r2, #25
 8003c36:	4311      	orrs	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6852      	ldr	r2, [r2, #4]
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	430a      	orrs	r2, r1
 8003c42:	4916      	ldr	r1, [pc, #88]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c48:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fd ffb4 	bl	8001bc0 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c5a:	e009      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c5c:	f7fd ffb0 	bl	8001bc0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d902      	bls.n	8003c70 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c6e:	e005      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ef      	beq.n	8003c5c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	4904      	ldr	r1, [pc, #16]	; (8003c9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	07ff800f 	.word	0x07ff800f
 8003ca4:	ff9f800f 	.word	0xff9f800f
 8003ca8:	f9ff800f 	.word	0xf9ff800f

08003cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e095      	b.n	8003dea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d108      	bne.n	8003cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cce:	d009      	beq.n	8003ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	61da      	str	r2, [r3, #28]
 8003cd6:	e005      	b.n	8003ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd fcea 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d24:	d902      	bls.n	8003d2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e002      	b.n	8003d32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d3a:	d007      	beq.n	8003d4c <HAL_SPI_Init+0xa0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	ea42 0103 	orr.w	r1, r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	0c1b      	lsrs	r3, r3, #16
 8003da8:	f003 0204 	and.w	r2, r3, #4
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dc8:	ea42 0103 	orr.w	r1, r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b08a      	sub	sp, #40	; 0x28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e00:	2301      	movs	r3, #1
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_SPI_TransmitReceive+0x26>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e1fb      	b.n	8004210 <HAL_SPI_TransmitReceive+0x41e>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e20:	f7fd fece 	bl	8001bc0 <HAL_GetTick>
 8003e24:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e2c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e34:	887b      	ldrh	r3, [r7, #2]
 8003e36:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e38:	887b      	ldrh	r3, [r7, #2]
 8003e3a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e3c:	7efb      	ldrb	r3, [r7, #27]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d00e      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x6e>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e48:	d106      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x66>
 8003e52:	7efb      	ldrb	r3, [r7, #27]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d003      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e5e:	e1cd      	b.n	80041fc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_SPI_TransmitReceive+0x80>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_SPI_TransmitReceive+0x80>
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e78:	e1c0      	b.n	80041fc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d003      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2205      	movs	r2, #5
 8003e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	887a      	ldrh	r2, [r7, #2]
 8003e9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	887a      	ldrh	r2, [r7, #2]
 8003ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	887a      	ldrh	r2, [r7, #2]
 8003eba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ed0:	d802      	bhi.n	8003ed8 <HAL_SPI_TransmitReceive+0xe6>
 8003ed2:	8a3b      	ldrh	r3, [r7, #16]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d908      	bls.n	8003eea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	e007      	b.n	8003efa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ef8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d007      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f20:	d97c      	bls.n	800401c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x13e>
 8003f2a:	8a7b      	ldrh	r3, [r7, #18]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d169      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f54:	e056      	b.n	8004004 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d11b      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x1aa>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x1aa>
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d113      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	881a      	ldrh	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	1c9a      	adds	r2, r3, #2
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d11c      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x1f2>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	b292      	uxth	r2, r2
 8003fc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	1c9a      	adds	r2, r3, #2
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fe4:	f7fd fdec 	bl	8001bc0 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d807      	bhi.n	8004004 <HAL_SPI_TransmitReceive+0x212>
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ffa:	d003      	beq.n	8004004 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004002:	e0fb      	b.n	80041fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1a3      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x164>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d19d      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x164>
 800401a:	e0df      	b.n	80041dc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_SPI_TransmitReceive+0x23a>
 8004024:	8a7b      	ldrh	r3, [r7, #18]
 8004026:	2b01      	cmp	r3, #1
 8004028:	f040 80cb 	bne.w	80041c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d912      	bls.n	800405c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	881a      	ldrh	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	1c9a      	adds	r2, r3, #2
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b02      	subs	r3, #2
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	87da      	strh	r2, [r3, #62]	; 0x3e
 800405a:	e0b2      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	7812      	ldrb	r2, [r2, #0]
 8004068:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004082:	e09e      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d134      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x30a>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d02f      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x30a>
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d12c      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d912      	bls.n	80040d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	881a      	ldrh	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b02      	subs	r3, #2
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040d0:	e012      	b.n	80040f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	7812      	ldrb	r2, [r2, #0]
 80040de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b01      	cmp	r3, #1
 8004108:	d148      	bne.n	800419c <HAL_SPI_TransmitReceive+0x3aa>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d042      	beq.n	800419c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b01      	cmp	r3, #1
 8004120:	d923      	bls.n	800416a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	b292      	uxth	r2, r2
 800412e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	1c9a      	adds	r2, r3, #2
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b02      	subs	r3, #2
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d81f      	bhi.n	8004198 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	e016      	b.n	8004198 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f103 020c 	add.w	r2, r3, #12
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004198:	2301      	movs	r3, #1
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800419c:	f7fd fd10 	bl	8001bc0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d803      	bhi.n	80041b4 <HAL_SPI_TransmitReceive+0x3c2>
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b2:	d102      	bne.n	80041ba <HAL_SPI_TransmitReceive+0x3c8>
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041c0:	e01c      	b.n	80041fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f47f af5b 	bne.w	8004084 <HAL_SPI_TransmitReceive+0x292>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f47f af54 	bne.w	8004084 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f937 	bl	8004454 <SPI_EndRxTxTransaction>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	661a      	str	r2, [r3, #96]	; 0x60
 80041f8:	e000      	b.n	80041fc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80041fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800420c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004210:	4618      	mov	r0, r3
 8004212:	3728      	adds	r7, #40	; 0x28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004228:	f7fd fcca 	bl	8001bc0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	4413      	add	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004238:	f7fd fcc2 	bl	8001bc0 <HAL_GetTick>
 800423c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800423e:	4b39      	ldr	r3, [pc, #228]	; (8004324 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	015b      	lsls	r3, r3, #5
 8004244:	0d1b      	lsrs	r3, r3, #20
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800424e:	e054      	b.n	80042fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004256:	d050      	beq.n	80042fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004258:	f7fd fcb2 	bl	8001bc0 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	429a      	cmp	r2, r3
 8004266:	d902      	bls.n	800426e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d13d      	bne.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800427c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004286:	d111      	bne.n	80042ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004290:	d004      	beq.n	800429c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429a:	d107      	bne.n	80042ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b4:	d10f      	bne.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e017      	b.n	800431a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	429a      	cmp	r2, r3
 8004316:	d19b      	bne.n	8004250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000020 	.word	0x20000020

08004328 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800433a:	f7fd fc41 	bl	8001bc0 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	4413      	add	r3, r2
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800434a:	f7fd fc39 	bl	8001bc0 <HAL_GetTick>
 800434e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004358:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	00da      	lsls	r2, r3, #3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	0d1b      	lsrs	r3, r3, #20
 8004368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004370:	e060      	b.n	8004434 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004378:	d107      	bne.n	800438a <SPI_WaitFifoStateUntilTimeout+0x62>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d104      	bne.n	800438a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004388:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004390:	d050      	beq.n	8004434 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004392:	f7fd fc15 	bl	8001bc0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439e:	429a      	cmp	r2, r3
 80043a0:	d902      	bls.n	80043a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d13d      	bne.n	8004424 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c0:	d111      	bne.n	80043e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ca:	d004      	beq.n	80043d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d107      	bne.n	80043e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ee:	d10f      	bne.n	8004410 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800440e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e010      	b.n	8004446 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	3b01      	subs	r3, #1
 8004432:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	d196      	bne.n	8004372 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3728      	adds	r7, #40	; 0x28
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000020 	.word	0x20000020

08004454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff ff5b 	bl	8004328 <SPI_WaitFifoStateUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e027      	b.n	80044d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff fec0 	bl	8004218 <SPI_WaitFlagStateUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e014      	b.n	80044d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff ff34 	bl	8004328 <SPI_WaitFifoStateUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e000      	b.n	80044d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e049      	b.n	8004586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fd f928 	bl	800175c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f000 fb7a 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e049      	b.n	8004634 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f841 	bl	800463c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f000 fb23 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_TIM_PWM_Start+0x24>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e03c      	b.n	80046ee <HAL_TIM_PWM_Start+0x9e>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b04      	cmp	r3, #4
 8004678:	d109      	bne.n	800468e <HAL_TIM_PWM_Start+0x3e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e02f      	b.n	80046ee <HAL_TIM_PWM_Start+0x9e>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d109      	bne.n	80046a8 <HAL_TIM_PWM_Start+0x58>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e022      	b.n	80046ee <HAL_TIM_PWM_Start+0x9e>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d109      	bne.n	80046c2 <HAL_TIM_PWM_Start+0x72>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	e015      	b.n	80046ee <HAL_TIM_PWM_Start+0x9e>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d109      	bne.n	80046dc <HAL_TIM_PWM_Start+0x8c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e008      	b.n	80046ee <HAL_TIM_PWM_Start+0x9e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e09c      	b.n	8004830 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d104      	bne.n	8004706 <HAL_TIM_PWM_Start+0xb6>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004704:	e023      	b.n	800474e <HAL_TIM_PWM_Start+0xfe>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b04      	cmp	r3, #4
 800470a:	d104      	bne.n	8004716 <HAL_TIM_PWM_Start+0xc6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004714:	e01b      	b.n	800474e <HAL_TIM_PWM_Start+0xfe>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d104      	bne.n	8004726 <HAL_TIM_PWM_Start+0xd6>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004724:	e013      	b.n	800474e <HAL_TIM_PWM_Start+0xfe>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d104      	bne.n	8004736 <HAL_TIM_PWM_Start+0xe6>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004734:	e00b      	b.n	800474e <HAL_TIM_PWM_Start+0xfe>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b10      	cmp	r3, #16
 800473a:	d104      	bne.n	8004746 <HAL_TIM_PWM_Start+0xf6>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004744:	e003      	b.n	800474e <HAL_TIM_PWM_Start+0xfe>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	6839      	ldr	r1, [r7, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fe68 	bl	800542c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a35      	ldr	r2, [pc, #212]	; (8004838 <HAL_TIM_PWM_Start+0x1e8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_TIM_PWM_Start+0x13e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a34      	ldr	r2, [pc, #208]	; (800483c <HAL_TIM_PWM_Start+0x1ec>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_TIM_PWM_Start+0x13e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a32      	ldr	r2, [pc, #200]	; (8004840 <HAL_TIM_PWM_Start+0x1f0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_TIM_PWM_Start+0x13e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a31      	ldr	r2, [pc, #196]	; (8004844 <HAL_TIM_PWM_Start+0x1f4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIM_PWM_Start+0x13e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2f      	ldr	r2, [pc, #188]	; (8004848 <HAL_TIM_PWM_Start+0x1f8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <HAL_TIM_PWM_Start+0x142>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_TIM_PWM_Start+0x144>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_TIM_PWM_Start+0x1e8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01d      	beq.n	80047ee <HAL_TIM_PWM_Start+0x19e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d018      	beq.n	80047ee <HAL_TIM_PWM_Start+0x19e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a22      	ldr	r2, [pc, #136]	; (800484c <HAL_TIM_PWM_Start+0x1fc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_TIM_PWM_Start+0x19e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a21      	ldr	r2, [pc, #132]	; (8004850 <HAL_TIM_PWM_Start+0x200>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_TIM_PWM_Start+0x19e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <HAL_TIM_PWM_Start+0x204>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_TIM_PWM_Start+0x19e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a17      	ldr	r2, [pc, #92]	; (800483c <HAL_TIM_PWM_Start+0x1ec>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIM_PWM_Start+0x19e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_TIM_PWM_Start+0x1f0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d115      	bne.n	800481a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	4b18      	ldr	r3, [pc, #96]	; (8004858 <HAL_TIM_PWM_Start+0x208>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b06      	cmp	r3, #6
 80047fe:	d015      	beq.n	800482c <HAL_TIM_PWM_Start+0x1dc>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004806:	d011      	beq.n	800482c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004818:	e008      	b.n	800482c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e000      	b.n	800482e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40013400 	.word	0x40013400
 8004840:	40014000 	.word	0x40014000
 8004844:	40014400 	.word	0x40014400
 8004848:	40014800 	.word	0x40014800
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	00010007 	.word	0x00010007

0800485c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004876:	2302      	movs	r3, #2
 8004878:	e0ff      	b.n	8004a7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b14      	cmp	r3, #20
 8004886:	f200 80f0 	bhi.w	8004a6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800488a:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048e5 	.word	0x080048e5
 8004894:	08004a6b 	.word	0x08004a6b
 8004898:	08004a6b 	.word	0x08004a6b
 800489c:	08004a6b 	.word	0x08004a6b
 80048a0:	08004925 	.word	0x08004925
 80048a4:	08004a6b 	.word	0x08004a6b
 80048a8:	08004a6b 	.word	0x08004a6b
 80048ac:	08004a6b 	.word	0x08004a6b
 80048b0:	08004967 	.word	0x08004967
 80048b4:	08004a6b 	.word	0x08004a6b
 80048b8:	08004a6b 	.word	0x08004a6b
 80048bc:	08004a6b 	.word	0x08004a6b
 80048c0:	080049a7 	.word	0x080049a7
 80048c4:	08004a6b 	.word	0x08004a6b
 80048c8:	08004a6b 	.word	0x08004a6b
 80048cc:	08004a6b 	.word	0x08004a6b
 80048d0:	080049e9 	.word	0x080049e9
 80048d4:	08004a6b 	.word	0x08004a6b
 80048d8:	08004a6b 	.word	0x08004a6b
 80048dc:	08004a6b 	.word	0x08004a6b
 80048e0:	08004a29 	.word	0x08004a29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fa2e 	bl	8004d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0208 	orr.w	r2, r2, #8
 80048fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0204 	bic.w	r2, r2, #4
 800490e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6999      	ldr	r1, [r3, #24]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	619a      	str	r2, [r3, #24]
      break;
 8004922:	e0a5      	b.n	8004a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fa9e 	bl	8004e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800493e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6999      	ldr	r1, [r3, #24]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	021a      	lsls	r2, r3, #8
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	619a      	str	r2, [r3, #24]
      break;
 8004964:	e084      	b.n	8004a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fb07 	bl	8004f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0208 	orr.w	r2, r2, #8
 8004980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0204 	bic.w	r2, r2, #4
 8004990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69d9      	ldr	r1, [r3, #28]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	61da      	str	r2, [r3, #28]
      break;
 80049a4:	e064      	b.n	8004a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fb6f 	bl	8005090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	021a      	lsls	r2, r3, #8
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	61da      	str	r2, [r3, #28]
      break;
 80049e6:	e043      	b.n	8004a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fbb8 	bl	8005164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0208 	orr.w	r2, r2, #8
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0204 	bic.w	r2, r2, #4
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a26:	e023      	b.n	8004a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fbfc 	bl	800522c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	021a      	lsls	r2, r3, #8
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a68:	e002      	b.n	8004a70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop

08004a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e0b6      	b.n	8004c0e <HAL_TIM_ConfigClockSource+0x18a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004abe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004adc:	d03e      	beq.n	8004b5c <HAL_TIM_ConfigClockSource+0xd8>
 8004ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae2:	f200 8087 	bhi.w	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aea:	f000 8086 	beq.w	8004bfa <HAL_TIM_ConfigClockSource+0x176>
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af2:	d87f      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
 8004af4:	2b70      	cmp	r3, #112	; 0x70
 8004af6:	d01a      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0xaa>
 8004af8:	2b70      	cmp	r3, #112	; 0x70
 8004afa:	d87b      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
 8004afc:	2b60      	cmp	r3, #96	; 0x60
 8004afe:	d050      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0x11e>
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d877      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
 8004b04:	2b50      	cmp	r3, #80	; 0x50
 8004b06:	d03c      	beq.n	8004b82 <HAL_TIM_ConfigClockSource+0xfe>
 8004b08:	2b50      	cmp	r3, #80	; 0x50
 8004b0a:	d873      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d058      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0x13e>
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d86f      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
 8004b14:	2b30      	cmp	r3, #48	; 0x30
 8004b16:	d064      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x15e>
 8004b18:	2b30      	cmp	r3, #48	; 0x30
 8004b1a:	d86b      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d060      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x15e>
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d867      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d05c      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x15e>
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d05a      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x15e>
 8004b2c:	e062      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b3e:	f000 fc55 	bl	80053ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	609a      	str	r2, [r3, #8]
      break;
 8004b5a:	e04f      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b6c:	f000 fc3e 	bl	80053ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b7e:	609a      	str	r2, [r3, #8]
      break;
 8004b80:	e03c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f000 fbb2 	bl	80052f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2150      	movs	r1, #80	; 0x50
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fc0b 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004ba0:	e02c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f000 fbd1 	bl	8005356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2160      	movs	r1, #96	; 0x60
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fbfb 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004bc0:	e01c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f000 fb92 	bl	80052f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2140      	movs	r1, #64	; 0x40
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fbeb 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004be0:	e00c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f000 fbe2 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004bf2:	e003      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf8:	e000      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a40      	ldr	r2, [pc, #256]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d00f      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3d      	ldr	r2, [pc, #244]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3b      	ldr	r2, [pc, #236]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3a      	ldr	r2, [pc, #232]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d108      	bne.n	8004c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01f      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d01b      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d017      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2b      	ldr	r2, [pc, #172]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <TIM_Base_SetConfig+0x128>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	; (8004d44 <TIM_Base_SetConfig+0x12c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_Base_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <TIM_Base_SetConfig+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a10      	ldr	r2, [pc, #64]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00f      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <TIM_Base_SetConfig+0x128>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <TIM_Base_SetConfig+0x12c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <TIM_Base_SetConfig+0x130>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d103      	bne.n	8004d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40013400 	.word	0x40013400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800

08004d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 0302 	bic.w	r3, r3, #2
 8004d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a2c      	ldr	r2, [pc, #176]	; (8004e58 <TIM_OC1_SetConfig+0x10c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_OC1_SetConfig+0x80>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <TIM_OC1_SetConfig+0x110>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC1_SetConfig+0x80>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2a      	ldr	r2, [pc, #168]	; (8004e60 <TIM_OC1_SetConfig+0x114>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC1_SetConfig+0x80>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <TIM_OC1_SetConfig+0x118>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC1_SetConfig+0x80>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a28      	ldr	r2, [pc, #160]	; (8004e68 <TIM_OC1_SetConfig+0x11c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10c      	bne.n	8004de6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0308 	bic.w	r3, r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <TIM_OC1_SetConfig+0x10c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00f      	beq.n	8004e0e <TIM_OC1_SetConfig+0xc2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <TIM_OC1_SetConfig+0x110>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <TIM_OC1_SetConfig+0xc2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <TIM_OC1_SetConfig+0x114>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <TIM_OC1_SetConfig+0xc2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <TIM_OC1_SetConfig+0x118>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_OC1_SetConfig+0xc2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <TIM_OC1_SetConfig+0x11c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d111      	bne.n	8004e32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800

08004e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f023 0210 	bic.w	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f023 0320 	bic.w	r3, r3, #32
 8004eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a28      	ldr	r2, [pc, #160]	; (8004f6c <TIM_OC2_SetConfig+0x100>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_OC2_SetConfig+0x6c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <TIM_OC2_SetConfig+0x104>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d10d      	bne.n	8004ef4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a1d      	ldr	r2, [pc, #116]	; (8004f6c <TIM_OC2_SetConfig+0x100>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00f      	beq.n	8004f1c <TIM_OC2_SetConfig+0xb0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <TIM_OC2_SetConfig+0x104>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_OC2_SetConfig+0xb0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <TIM_OC2_SetConfig+0x108>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_OC2_SetConfig+0xb0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <TIM_OC2_SetConfig+0x10c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_OC2_SetConfig+0xb0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <TIM_OC2_SetConfig+0x110>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d113      	bne.n	8004f44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40013400 	.word	0x40013400
 8004f74:	40014000 	.word	0x40014000
 8004f78:	40014400 	.word	0x40014400
 8004f7c:	40014800 	.word	0x40014800

08004f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a27      	ldr	r2, [pc, #156]	; (800507c <TIM_OC3_SetConfig+0xfc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_OC3_SetConfig+0x6a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a26      	ldr	r2, [pc, #152]	; (8005080 <TIM_OC3_SetConfig+0x100>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d10d      	bne.n	8005006 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1c      	ldr	r2, [pc, #112]	; (800507c <TIM_OC3_SetConfig+0xfc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00f      	beq.n	800502e <TIM_OC3_SetConfig+0xae>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <TIM_OC3_SetConfig+0x100>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_OC3_SetConfig+0xae>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <TIM_OC3_SetConfig+0x104>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <TIM_OC3_SetConfig+0xae>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <TIM_OC3_SetConfig+0x108>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_OC3_SetConfig+0xae>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a18      	ldr	r2, [pc, #96]	; (800508c <TIM_OC3_SetConfig+0x10c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d113      	bne.n	8005056 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	621a      	str	r2, [r3, #32]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40013400 	.word	0x40013400
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400
 800508c:	40014800 	.word	0x40014800

08005090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a18      	ldr	r2, [pc, #96]	; (8005150 <TIM_OC4_SetConfig+0xc0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00f      	beq.n	8005114 <TIM_OC4_SetConfig+0x84>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <TIM_OC4_SetConfig+0xc4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00b      	beq.n	8005114 <TIM_OC4_SetConfig+0x84>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a16      	ldr	r2, [pc, #88]	; (8005158 <TIM_OC4_SetConfig+0xc8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_OC4_SetConfig+0x84>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a15      	ldr	r2, [pc, #84]	; (800515c <TIM_OC4_SetConfig+0xcc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC4_SetConfig+0x84>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a14      	ldr	r2, [pc, #80]	; (8005160 <TIM_OC4_SetConfig+0xd0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d109      	bne.n	8005128 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800511a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	019b      	lsls	r3, r3, #6
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40013400 	.word	0x40013400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800

08005164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	041b      	lsls	r3, r3, #16
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <TIM_OC5_SetConfig+0xb4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00f      	beq.n	80051de <TIM_OC5_SetConfig+0x7a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a16      	ldr	r2, [pc, #88]	; (800521c <TIM_OC5_SetConfig+0xb8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00b      	beq.n	80051de <TIM_OC5_SetConfig+0x7a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a15      	ldr	r2, [pc, #84]	; (8005220 <TIM_OC5_SetConfig+0xbc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_OC5_SetConfig+0x7a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a14      	ldr	r2, [pc, #80]	; (8005224 <TIM_OC5_SetConfig+0xc0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_OC5_SetConfig+0x7a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a13      	ldr	r2, [pc, #76]	; (8005228 <TIM_OC5_SetConfig+0xc4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d109      	bne.n	80051f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	621a      	str	r2, [r3, #32]
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40013400 	.word	0x40013400
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800

0800522c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	051b      	lsls	r3, r3, #20
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <TIM_OC6_SetConfig+0xb8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00f      	beq.n	80052a8 <TIM_OC6_SetConfig+0x7c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <TIM_OC6_SetConfig+0xbc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <TIM_OC6_SetConfig+0x7c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <TIM_OC6_SetConfig+0xc0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_OC6_SetConfig+0x7c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <TIM_OC6_SetConfig+0xc4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_OC6_SetConfig+0x7c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <TIM_OC6_SetConfig+0xc8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d109      	bne.n	80052bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	029b      	lsls	r3, r3, #10
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800

080052f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f023 0201 	bic.w	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 030a 	bic.w	r3, r3, #10
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005356:	b480      	push	{r7}
 8005358:	b087      	sub	sp, #28
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f023 0210 	bic.w	r2, r3, #16
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	031b      	lsls	r3, r3, #12
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f043 0307 	orr.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	431a      	orrs	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	609a      	str	r2, [r3, #8]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	2201      	movs	r2, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	43db      	mvns	r3, r3
 800544e:	401a      	ands	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	431a      	orrs	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800548c:	2302      	movs	r3, #2
 800548e:	e068      	b.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a2e      	ldr	r2, [pc, #184]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2d      	ldr	r2, [pc, #180]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d108      	bne.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005502:	d018      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1a      	ldr	r2, [pc, #104]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a13      	ldr	r2, [pc, #76]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a14      	ldr	r2, [pc, #80]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10c      	bne.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800553c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	4313      	orrs	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40013400 	.word	0x40013400
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40014000 	.word	0x40014000

08005588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e065      	b.n	8005670 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a16      	ldr	r2, [pc, #88]	; (800567c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a14      	ldr	r2, [pc, #80]	; (8005680 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d115      	bne.n	800565e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	051b      	lsls	r3, r3, #20
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40013400 	.word	0x40013400

08005684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e042      	b.n	800571c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569c:	2b00      	cmp	r3, #0
 800569e:	d106      	bne.n	80056ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fc f93d 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2224      	movs	r2, #36	; 0x24
 80056b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9d4 	bl	8005a74 <UART_SetConfig>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e022      	b.n	800571c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fcc4 	bl	800606c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fd4b 	bl	80061b0 <UART_CheckIdleState>
 800571a:	4603      	mov	r3, r0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e02e      	b.n	8005794 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2224      	movs	r2, #36	; 0x24
 800573a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fc f93e 	bl	80019e8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4613      	mov	r3, r2
 80057aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	f040 8084 	bne.w	80058c0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_UART_Transmit+0x28>
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e07c      	b.n	80058c2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Transmit+0x3a>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e075      	b.n	80058c2 <HAL_UART_Transmit+0x126>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2221      	movs	r2, #33	; 0x21
 80057ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057ee:	f7fc f9e7 	bl	8001bc0 <HAL_GetTick>
 80057f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580c:	d108      	bne.n	8005820 <HAL_UART_Transmit+0x84>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e003      	b.n	8005828 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005830:	e02d      	b.n	800588e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	2180      	movs	r1, #128	; 0x80
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fd02 	bl	8006246 <UART_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e03a      	b.n	80058c2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800585e:	b292      	uxth	r2, r2
 8005860:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	3302      	adds	r3, #2
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e008      	b.n	800587c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	b292      	uxth	r2, r2
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3301      	adds	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1cb      	bne.n	8005832 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2200      	movs	r2, #0
 80058a2:	2140      	movs	r1, #64	; 0x40
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fcce 	bl	8006246 <UART_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e006      	b.n	80058c2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	e000      	b.n	80058c2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80058c0:	2302      	movs	r3, #2
  }
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b08a      	sub	sp, #40	; 0x28
 80058ce:	af02      	add	r7, sp, #8
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	4613      	mov	r3, r2
 80058d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	f040 80c1 	bne.w	8005a68 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_UART_Receive+0x28>
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e0b9      	b.n	8005a6a <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_UART_Receive+0x3a>
 8005900:	2302      	movs	r3, #2
 8005902:	e0b2      	b.n	8005a6a <HAL_UART_Receive+0x1a0>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2222      	movs	r2, #34	; 0x22
 8005918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005922:	f7fc f94d 	bl	8001bc0 <HAL_GetTick>
 8005926:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	88fa      	ldrh	r2, [r7, #6]
 800592c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	88fa      	ldrh	r2, [r7, #6]
 8005934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005940:	d10e      	bne.n	8005960 <HAL_UART_Receive+0x96>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d105      	bne.n	8005956 <HAL_UART_Receive+0x8c>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005954:	e02d      	b.n	80059b2 <HAL_UART_Receive+0xe8>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	22ff      	movs	r2, #255	; 0xff
 800595a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800595e:	e028      	b.n	80059b2 <HAL_UART_Receive+0xe8>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10d      	bne.n	8005984 <HAL_UART_Receive+0xba>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_UART_Receive+0xb0>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	22ff      	movs	r2, #255	; 0xff
 8005974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005978:	e01b      	b.n	80059b2 <HAL_UART_Receive+0xe8>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	227f      	movs	r2, #127	; 0x7f
 800597e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005982:	e016      	b.n	80059b2 <HAL_UART_Receive+0xe8>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800598c:	d10d      	bne.n	80059aa <HAL_UART_Receive+0xe0>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <HAL_UART_Receive+0xd6>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	227f      	movs	r2, #127	; 0x7f
 800599a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800599e:	e008      	b.n	80059b2 <HAL_UART_Receive+0xe8>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	223f      	movs	r2, #63	; 0x3f
 80059a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059a8:	e003      	b.n	80059b2 <HAL_UART_Receive+0xe8>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80059b8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c2:	d108      	bne.n	80059d6 <HAL_UART_Receive+0x10c>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	e003      	b.n	80059de <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80059e6:	e033      	b.n	8005a50 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2200      	movs	r2, #0
 80059f0:	2120      	movs	r1, #32
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fc27 	bl	8006246 <UART_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e033      	b.n	8005a6a <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10c      	bne.n	8005a22 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	8a7b      	ldrh	r3, [r7, #18]
 8005a12:	4013      	ands	r3, r2
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	e00d      	b.n	8005a3e <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	8a7b      	ldrh	r3, [r7, #18]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	4013      	ands	r3, r2
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1c5      	bne.n	80059e8 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e000      	b.n	8005a6a <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a78:	b08c      	sub	sp, #48	; 0x30
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4baa      	ldr	r3, [pc, #680]	; (8005d4c <UART_SetConfig+0x2d8>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a9f      	ldr	r2, [pc, #636]	; (8005d50 <UART_SetConfig+0x2dc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005adc:	4313      	orrs	r3, r2
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005aea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	f023 010f 	bic.w	r1, r3, #15
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a90      	ldr	r2, [pc, #576]	; (8005d54 <UART_SetConfig+0x2e0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d125      	bne.n	8005b64 <UART_SetConfig+0xf0>
 8005b18:	4b8f      	ldr	r3, [pc, #572]	; (8005d58 <UART_SetConfig+0x2e4>)
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d81a      	bhi.n	8005b5c <UART_SetConfig+0xe8>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <UART_SetConfig+0xb8>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b3d 	.word	0x08005b3d
 8005b30:	08005b4d 	.word	0x08005b4d
 8005b34:	08005b45 	.word	0x08005b45
 8005b38:	08005b55 	.word	0x08005b55
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b42:	e116      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005b44:	2302      	movs	r3, #2
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b4a:	e112      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b52:	e10e      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005b54:	2308      	movs	r3, #8
 8005b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b5a:	e10a      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b62:	e106      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a7c      	ldr	r2, [pc, #496]	; (8005d5c <UART_SetConfig+0x2e8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d138      	bne.n	8005be0 <UART_SetConfig+0x16c>
 8005b6e:	4b7a      	ldr	r3, [pc, #488]	; (8005d58 <UART_SetConfig+0x2e4>)
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b74:	f003 030c 	and.w	r3, r3, #12
 8005b78:	2b0c      	cmp	r3, #12
 8005b7a:	d82d      	bhi.n	8005bd8 <UART_SetConfig+0x164>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0x110>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005bb9 	.word	0x08005bb9
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005bd9 	.word	0x08005bd9
 8005b90:	08005bd9 	.word	0x08005bd9
 8005b94:	08005bc9 	.word	0x08005bc9
 8005b98:	08005bd9 	.word	0x08005bd9
 8005b9c:	08005bd9 	.word	0x08005bd9
 8005ba0:	08005bd9 	.word	0x08005bd9
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	08005bd9 	.word	0x08005bd9
 8005bac:	08005bd9 	.word	0x08005bd9
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005bd1 	.word	0x08005bd1
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bbe:	e0d8      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc6:	e0d4      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bce:	e0d0      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd6:	e0cc      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bde:	e0c8      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a5e      	ldr	r2, [pc, #376]	; (8005d60 <UART_SetConfig+0x2ec>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d125      	bne.n	8005c36 <UART_SetConfig+0x1c2>
 8005bea:	4b5b      	ldr	r3, [pc, #364]	; (8005d58 <UART_SetConfig+0x2e4>)
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bf4:	2b30      	cmp	r3, #48	; 0x30
 8005bf6:	d016      	beq.n	8005c26 <UART_SetConfig+0x1b2>
 8005bf8:	2b30      	cmp	r3, #48	; 0x30
 8005bfa:	d818      	bhi.n	8005c2e <UART_SetConfig+0x1ba>
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d00a      	beq.n	8005c16 <UART_SetConfig+0x1a2>
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	d814      	bhi.n	8005c2e <UART_SetConfig+0x1ba>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <UART_SetConfig+0x19a>
 8005c08:	2b10      	cmp	r3, #16
 8005c0a:	d008      	beq.n	8005c1e <UART_SetConfig+0x1aa>
 8005c0c:	e00f      	b.n	8005c2e <UART_SetConfig+0x1ba>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c14:	e0ad      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c16:	2302      	movs	r3, #2
 8005c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c1c:	e0a9      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c1e:	2304      	movs	r3, #4
 8005c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c24:	e0a5      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c26:	2308      	movs	r3, #8
 8005c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2c:	e0a1      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c2e:	2310      	movs	r3, #16
 8005c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c34:	e09d      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a4a      	ldr	r2, [pc, #296]	; (8005d64 <UART_SetConfig+0x2f0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d125      	bne.n	8005c8c <UART_SetConfig+0x218>
 8005c40:	4b45      	ldr	r3, [pc, #276]	; (8005d58 <UART_SetConfig+0x2e4>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c4c:	d016      	beq.n	8005c7c <UART_SetConfig+0x208>
 8005c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c50:	d818      	bhi.n	8005c84 <UART_SetConfig+0x210>
 8005c52:	2b80      	cmp	r3, #128	; 0x80
 8005c54:	d00a      	beq.n	8005c6c <UART_SetConfig+0x1f8>
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d814      	bhi.n	8005c84 <UART_SetConfig+0x210>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <UART_SetConfig+0x1f0>
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d008      	beq.n	8005c74 <UART_SetConfig+0x200>
 8005c62:	e00f      	b.n	8005c84 <UART_SetConfig+0x210>
 8005c64:	2300      	movs	r3, #0
 8005c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c6a:	e082      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c72:	e07e      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c74:	2304      	movs	r3, #4
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c7a:	e07a      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c82:	e076      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c84:	2310      	movs	r3, #16
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8a:	e072      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a35      	ldr	r2, [pc, #212]	; (8005d68 <UART_SetConfig+0x2f4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d12a      	bne.n	8005cec <UART_SetConfig+0x278>
 8005c96:	4b30      	ldr	r3, [pc, #192]	; (8005d58 <UART_SetConfig+0x2e4>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca4:	d01a      	beq.n	8005cdc <UART_SetConfig+0x268>
 8005ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005caa:	d81b      	bhi.n	8005ce4 <UART_SetConfig+0x270>
 8005cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb0:	d00c      	beq.n	8005ccc <UART_SetConfig+0x258>
 8005cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb6:	d815      	bhi.n	8005ce4 <UART_SetConfig+0x270>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <UART_SetConfig+0x250>
 8005cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc0:	d008      	beq.n	8005cd4 <UART_SetConfig+0x260>
 8005cc2:	e00f      	b.n	8005ce4 <UART_SetConfig+0x270>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cca:	e052      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cd2:	e04e      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cda:	e04a      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ce2:	e046      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cea:	e042      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a17      	ldr	r2, [pc, #92]	; (8005d50 <UART_SetConfig+0x2dc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d13a      	bne.n	8005d6c <UART_SetConfig+0x2f8>
 8005cf6:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <UART_SetConfig+0x2e4>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d04:	d01a      	beq.n	8005d3c <UART_SetConfig+0x2c8>
 8005d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d0a:	d81b      	bhi.n	8005d44 <UART_SetConfig+0x2d0>
 8005d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d10:	d00c      	beq.n	8005d2c <UART_SetConfig+0x2b8>
 8005d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d16:	d815      	bhi.n	8005d44 <UART_SetConfig+0x2d0>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <UART_SetConfig+0x2b0>
 8005d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d20:	d008      	beq.n	8005d34 <UART_SetConfig+0x2c0>
 8005d22:	e00f      	b.n	8005d44 <UART_SetConfig+0x2d0>
 8005d24:	2300      	movs	r3, #0
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2a:	e022      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d32:	e01e      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d3a:	e01a      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d42:	e016      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4a:	e012      	b.n	8005d72 <UART_SetConfig+0x2fe>
 8005d4c:	cfff69f3 	.word	0xcfff69f3
 8005d50:	40008000 	.word	0x40008000
 8005d54:	40013800 	.word	0x40013800
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	40004400 	.word	0x40004400
 8005d60:	40004800 	.word	0x40004800
 8005d64:	40004c00 	.word	0x40004c00
 8005d68:	40005000 	.word	0x40005000
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4aae      	ldr	r2, [pc, #696]	; (8006030 <UART_SetConfig+0x5bc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	f040 8097 	bne.w	8005eac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d823      	bhi.n	8005dce <UART_SetConfig+0x35a>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <UART_SetConfig+0x318>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005dcf 	.word	0x08005dcf
 8005d94:	08005db9 	.word	0x08005db9
 8005d98:	08005dcf 	.word	0x08005dcf
 8005d9c:	08005dbf 	.word	0x08005dbf
 8005da0:	08005dcf 	.word	0x08005dcf
 8005da4:	08005dcf 	.word	0x08005dcf
 8005da8:	08005dcf 	.word	0x08005dcf
 8005dac:	08005dc7 	.word	0x08005dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db0:	f7fd f978 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8005db4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005db6:	e010      	b.n	8005dda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db8:	4b9e      	ldr	r3, [pc, #632]	; (8006034 <UART_SetConfig+0x5c0>)
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dbc:	e00d      	b.n	8005dda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dbe:	f7fd f8d9 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8005dc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dc4:	e009      	b.n	8005dda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dcc:	e005      	b.n	8005dda <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8130 	beq.w	8006042 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	4a94      	ldr	r2, [pc, #592]	; (8006038 <UART_SetConfig+0x5c4>)
 8005de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dec:	461a      	mov	r2, r3
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005df4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	4413      	add	r3, r2
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d305      	bcc.n	8005e12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d903      	bls.n	8005e1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e18:	e113      	b.n	8006042 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	60bb      	str	r3, [r7, #8]
 8005e20:	60fa      	str	r2, [r7, #12]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	4a84      	ldr	r2, [pc, #528]	; (8006038 <UART_SetConfig+0x5c4>)
 8005e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2200      	movs	r2, #0
 8005e30:	603b      	str	r3, [r7, #0]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e3c:	f7fa f9de 	bl	80001fc <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4610      	mov	r0, r2
 8005e46:	4619      	mov	r1, r3
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	020b      	lsls	r3, r1, #8
 8005e52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e56:	0202      	lsls	r2, r0, #8
 8005e58:	6979      	ldr	r1, [r7, #20]
 8005e5a:	6849      	ldr	r1, [r1, #4]
 8005e5c:	0849      	lsrs	r1, r1, #1
 8005e5e:	2000      	movs	r0, #0
 8005e60:	460c      	mov	r4, r1
 8005e62:	4605      	mov	r5, r0
 8005e64:	eb12 0804 	adds.w	r8, r2, r4
 8005e68:	eb43 0905 	adc.w	r9, r3, r5
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	469a      	mov	sl, r3
 8005e74:	4693      	mov	fp, r2
 8005e76:	4652      	mov	r2, sl
 8005e78:	465b      	mov	r3, fp
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	f7fa f9bd 	bl	80001fc <__aeabi_uldivmod>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4613      	mov	r3, r2
 8005e88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e90:	d308      	bcc.n	8005ea4 <UART_SetConfig+0x430>
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e98:	d204      	bcs.n	8005ea4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6a3a      	ldr	r2, [r7, #32]
 8005ea0:	60da      	str	r2, [r3, #12]
 8005ea2:	e0ce      	b.n	8006042 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005eaa:	e0ca      	b.n	8006042 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb4:	d166      	bne.n	8005f84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d827      	bhi.n	8005f0e <UART_SetConfig+0x49a>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0x450>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	08005f0f 	.word	0x08005f0f
 8005ed4:	08005eff 	.word	0x08005eff
 8005ed8:	08005f0f 	.word	0x08005f0f
 8005edc:	08005f0f 	.word	0x08005f0f
 8005ee0:	08005f0f 	.word	0x08005f0f
 8005ee4:	08005f07 	.word	0x08005f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee8:	f7fd f8dc 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8005eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005eee:	e014      	b.n	8005f1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef0:	f7fd f8ee 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 8005ef4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ef6:	e010      	b.n	8005f1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b4e      	ldr	r3, [pc, #312]	; (8006034 <UART_SetConfig+0x5c0>)
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005efc:	e00d      	b.n	8005f1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efe:	f7fd f839 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8005f02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f04:	e009      	b.n	8005f1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f0c:	e005      	b.n	8005f1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8090 	beq.w	8006042 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	4a44      	ldr	r2, [pc, #272]	; (8006038 <UART_SetConfig+0x5c4>)
 8005f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f34:	005a      	lsls	r2, r3, #1
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	441a      	add	r2, r3
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f46:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	2b0f      	cmp	r3, #15
 8005f4c:	d916      	bls.n	8005f7c <UART_SetConfig+0x508>
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f54:	d212      	bcs.n	8005f7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f023 030f 	bic.w	r3, r3, #15
 8005f5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	8bfb      	ldrh	r3, [r7, #30]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	8bfa      	ldrh	r2, [r7, #30]
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	e062      	b.n	8006042 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f82:	e05e      	b.n	8006042 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d828      	bhi.n	8005fde <UART_SetConfig+0x56a>
 8005f8c:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <UART_SetConfig+0x520>)
 8005f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f92:	bf00      	nop
 8005f94:	08005fb9 	.word	0x08005fb9
 8005f98:	08005fc1 	.word	0x08005fc1
 8005f9c:	08005fc9 	.word	0x08005fc9
 8005fa0:	08005fdf 	.word	0x08005fdf
 8005fa4:	08005fcf 	.word	0x08005fcf
 8005fa8:	08005fdf 	.word	0x08005fdf
 8005fac:	08005fdf 	.word	0x08005fdf
 8005fb0:	08005fdf 	.word	0x08005fdf
 8005fb4:	08005fd7 	.word	0x08005fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb8:	f7fd f874 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8005fbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fbe:	e014      	b.n	8005fea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc0:	f7fd f886 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 8005fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fc6:	e010      	b.n	8005fea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc8:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <UART_SetConfig+0x5c0>)
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fcc:	e00d      	b.n	8005fea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fce:	f7fc ffd1 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fd4:	e009      	b.n	8005fea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fdc:	e005      	b.n	8005fea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fe8:	bf00      	nop
    }

    if (pclk != 0U)
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d028      	beq.n	8006042 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	4a10      	ldr	r2, [pc, #64]	; (8006038 <UART_SetConfig+0x5c4>)
 8005ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	441a      	add	r2, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006012:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	2b0f      	cmp	r3, #15
 8006018:	d910      	bls.n	800603c <UART_SetConfig+0x5c8>
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006020:	d20c      	bcs.n	800603c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	b29a      	uxth	r2, r3
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60da      	str	r2, [r3, #12]
 800602c:	e009      	b.n	8006042 <UART_SetConfig+0x5ce>
 800602e:	bf00      	nop
 8006030:	40008000 	.word	0x40008000
 8006034:	00f42400 	.word	0x00f42400
 8006038:	08006694 	.word	0x08006694
      }
      else
      {
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2201      	movs	r2, #1
 8006046:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2201      	movs	r2, #1
 800604e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2200      	movs	r2, #0
 8006056:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2200      	movs	r2, #0
 800605c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800605e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006062:	4618      	mov	r0, r3
 8006064:	3730      	adds	r7, #48	; 0x30
 8006066:	46bd      	mov	sp, r7
 8006068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800606c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01a      	beq.n	8006182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800616a:	d10a      	bne.n	8006182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	605a      	str	r2, [r3, #4]
  }
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061c0:	f7fb fcfe 	bl	8001bc0 <HAL_GetTick>
 80061c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d10e      	bne.n	80061f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f82f 	bl	8006246 <UART_WaitOnFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e025      	b.n	800623e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d10e      	bne.n	800621e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f819 	bl	8006246 <UART_WaitOnFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e00f      	b.n	800623e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b09c      	sub	sp, #112	; 0x70
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	4613      	mov	r3, r2
 8006254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006256:	e0a9      	b.n	80063ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800625e:	f000 80a5 	beq.w	80063ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006262:	f7fb fcad 	bl	8001bc0 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800626e:	429a      	cmp	r2, r3
 8006270:	d302      	bcc.n	8006278 <UART_WaitOnFlagUntilTimeout+0x32>
 8006272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006274:	2b00      	cmp	r3, #0
 8006276:	d140      	bne.n	80062fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800628c:	667b      	str	r3, [r7, #100]	; 0x64
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006298:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800629c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e6      	bne.n	8006278 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	f023 0301 	bic.w	r3, r3, #1
 80062c0:	663b      	str	r3, [r7, #96]	; 0x60
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80062cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e5      	bne.n	80062aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e069      	b.n	80063ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d051      	beq.n	80063ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006316:	d149      	bne.n	80063ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006320:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006336:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
 8006342:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	613b      	str	r3, [r7, #16]
   return(result);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	66bb      	str	r3, [r7, #104]	; 0x68
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006374:	623a      	str	r2, [r7, #32]
 8006376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	69f9      	ldr	r1, [r7, #28]
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	61bb      	str	r3, [r7, #24]
   return(result);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e010      	b.n	80063ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69da      	ldr	r2, [r3, #28]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4013      	ands	r3, r2
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	f43f af46 	beq.w	8006258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3770      	adds	r7, #112	; 0x70
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_UARTEx_DisableFifoMode+0x16>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e027      	b.n	800643c <HAL_UARTEx_DisableFifoMode+0x66>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2224      	movs	r2, #36	; 0x24
 80063f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800641a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800645c:	2302      	movs	r3, #2
 800645e:	e02d      	b.n	80064bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f84f 	bl	8006540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064d8:	2302      	movs	r3, #2
 80064da:	e02d      	b.n	8006538 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2224      	movs	r2, #36	; 0x24
 80064e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f811 	bl	8006540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654c:	2b00      	cmp	r3, #0
 800654e:	d108      	bne.n	8006562 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006560:	e031      	b.n	80065c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006562:	2308      	movs	r3, #8
 8006564:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006566:	2308      	movs	r3, #8
 8006568:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	0e5b      	lsrs	r3, r3, #25
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	0f5b      	lsrs	r3, r3, #29
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	7b3a      	ldrb	r2, [r7, #12]
 800658e:	4911      	ldr	r1, [pc, #68]	; (80065d4 <UARTEx_SetNbDataToProcess+0x94>)
 8006590:	5c8a      	ldrb	r2, [r1, r2]
 8006592:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006596:	7b3a      	ldrb	r2, [r7, #12]
 8006598:	490f      	ldr	r1, [pc, #60]	; (80065d8 <UARTEx_SetNbDataToProcess+0x98>)
 800659a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800659c:	fb93 f3f2 	sdiv	r3, r3, r2
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	7b7a      	ldrb	r2, [r7, #13]
 80065ac:	4909      	ldr	r1, [pc, #36]	; (80065d4 <UARTEx_SetNbDataToProcess+0x94>)
 80065ae:	5c8a      	ldrb	r2, [r1, r2]
 80065b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065b4:	7b7a      	ldrb	r2, [r7, #13]
 80065b6:	4908      	ldr	r1, [pc, #32]	; (80065d8 <UARTEx_SetNbDataToProcess+0x98>)
 80065b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	080066ac 	.word	0x080066ac
 80065d8:	080066b4 	.word	0x080066b4

080065dc <memset>:
 80065dc:	4402      	add	r2, r0
 80065de:	4603      	mov	r3, r0
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d100      	bne.n	80065e6 <memset+0xa>
 80065e4:	4770      	bx	lr
 80065e6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ea:	e7f9      	b.n	80065e0 <memset+0x4>

080065ec <__libc_init_array>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	4d0d      	ldr	r5, [pc, #52]	; (8006624 <__libc_init_array+0x38>)
 80065f0:	4c0d      	ldr	r4, [pc, #52]	; (8006628 <__libc_init_array+0x3c>)
 80065f2:	1b64      	subs	r4, r4, r5
 80065f4:	10a4      	asrs	r4, r4, #2
 80065f6:	2600      	movs	r6, #0
 80065f8:	42a6      	cmp	r6, r4
 80065fa:	d109      	bne.n	8006610 <__libc_init_array+0x24>
 80065fc:	4d0b      	ldr	r5, [pc, #44]	; (800662c <__libc_init_array+0x40>)
 80065fe:	4c0c      	ldr	r4, [pc, #48]	; (8006630 <__libc_init_array+0x44>)
 8006600:	f000 f818 	bl	8006634 <_init>
 8006604:	1b64      	subs	r4, r4, r5
 8006606:	10a4      	asrs	r4, r4, #2
 8006608:	2600      	movs	r6, #0
 800660a:	42a6      	cmp	r6, r4
 800660c:	d105      	bne.n	800661a <__libc_init_array+0x2e>
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	f855 3b04 	ldr.w	r3, [r5], #4
 8006614:	4798      	blx	r3
 8006616:	3601      	adds	r6, #1
 8006618:	e7ee      	b.n	80065f8 <__libc_init_array+0xc>
 800661a:	f855 3b04 	ldr.w	r3, [r5], #4
 800661e:	4798      	blx	r3
 8006620:	3601      	adds	r6, #1
 8006622:	e7f2      	b.n	800660a <__libc_init_array+0x1e>
 8006624:	080066c4 	.word	0x080066c4
 8006628:	080066c4 	.word	0x080066c4
 800662c:	080066c4 	.word	0x080066c4
 8006630:	080066c8 	.word	0x080066c8

08006634 <_init>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr

08006640 <_fini>:
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	bf00      	nop
 8006644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006646:	bc08      	pop	{r3}
 8006648:	469e      	mov	lr, r3
 800664a:	4770      	bx	lr
